[
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Info", "B. Message", "C. Log", "D. Error", "E. Assert"],
    "answer": "A,E",
    "title": "Question 1",
    "explanation": ""
  },
  {
    "content": "Given two expressions var1 and var2. What are two valid ways to return the logical AND of the two expressions and ensure it is data type Boolean ?\nChoose 2 answers:",
    "options": [
      "A. var1.toBoolean() && var2toBoolean()",
      "B. Boolean(var1 && var2)",
      "C. Boolean(var1) && Boolean(var2)",
      "D. var1 && var2"
    ],
    "answer": "B,C",
    "title": "Question 2",
    "explanation": ""
  },
  {
    "content": "Given the requirement to refactor the code above to JavaScript class format, which class definition is correct?",
    "options": ["A. B", "B. D", "C. C", "D. A"],
    "answer": "D",
    "title": "Question 3",
    "explanation": ""
  },
  {
    "content": "Refer to following code:\nclass Vehicle {\nconstructor(plate) {\nThis.plate =plate;\n}\n}\nClass Truck extends Vehicle {\nconstructor(plate, weight) {\n//Missing code\nThis.weight = weight;\n}\ndisplayWeight() {\nconsole.log('The truck ${this.plate} has a weight of ${this.weight} lb.');}} Let myTruck = new Truck('123AB', 5000); myTruck.displayWeight(); Which statement should be added to line 09 for the code to display 'The truck 123AB has a weight of 5000lb.'?",
    "options": [
      "A. Vehicle.plate = plate;",
      "B. Super.plate =plate;",
      "C. This.plate =plate;",
      "D. super(plate);"
    ],
    "answer": "D",
    "title": "Question 4",
    "explanation": ""
  },
  {
    "content": "Which option is a core Node,js module?",
    "options": ["A. locate", "B. Path", "C. Memory", "D. Ios"],
    "answer": "B",
    "title": "Question 5",
    "explanation": ""
  },
  {
    "content": "A developer is working on an ecommerce website where the delivery date is dynamically calculated based on the current day. The code line below is responsible for this calculation.\nConst deliveryDate = new Date ();\nDue to changes in the business requirements, the delivery date must now be today's date + 9 days.\nWhich code meets this new requirement?",
    "options": [
      "A. deliveryDate.setDate(( new Date ( )).getDate () +9);",
      "B. deliveryDate.setDate( Date.current () + 9);",
      "C. deliveryDate.date = new Date(+9) ;",
      "D. deliveryDate.date = Date.current () + 9;"
    ],
    "answer": "A",
    "title": "Question 6",
    "explanation": ""
  },
  {
    "content": "Given the JavaScript below:\n01 function filterDOM (searchString) {\n02 const parsedSearchString = searchString && searchString.toLowerCase() ;\n03 document.quesrySelectorAll(' .account' ) . forEach(account => (\n04 const accountName = account.innerHTML.toLOwerCase();\n05 account. Style.display = accountName.includes(parsedSearchString) ? /*Insert code*/;\n06 )};\n07 }\nWhich code should replace the placeholder comment on line 05 to hide accounts that do not match the search string?",
    "options": [
      "A. ' Block ' : ' none '",
      "B. ' name ' : ' block '",
      "C. ' visible ' : ' hidden '",
      "D. ' hidden ' : ' visible '"
    ],
    "answer": "A",
    "title": "Question 7",
    "explanation": ""
  },
  {
    "content": "Refer to the following array:\nLet arr = [ 1,2, 3, 4, 5];\nWhich three options result in x evaluating as [3, 4, 5] ?\nChoose 3 answers.",
    "options": [
      "A. Let x= arr.splice(2,3);",
      "B. Let x= arr.filter (( a) => (a<2));",
      "C. Let x= arr.filter((a) => ( return a>2 ));",
      "D. Let x= arr.slice(2);",
      "E. Let x = arr.slice(2,3);"
    ],
    "answer": "A,C,D",
    "title": "Question 8",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nSetcurrent URL ();\nconsole.log('The current URL is: ' +url );\nfunction setCurrentUrl() {\nUrl = window.location.href:\nWhat happens when the code executes?",
    "options": [
      "A. The url variable has local scope and line 02 throws an error.",
      "B. The url variable has global scope and line 02 executes correctly.",
      "C. The url variable has global scope and line 02 throws an error.",
      "D. The url variable has local scope and line 02 executes correctly."
    ],
    "answer": "B",
    "title": "Question 9",
    "explanation": ""
  },
  {
    "content": "A developer at Universal Containers creates a new landing page based on HTML, CSS, and JavaScript TO ensure that visitors have a good experience, a script named personaliseContext needs to be executed when the webpage is fully loaded (HTML content and all related files ), in order to do some custom initialization.\nWhich statement should be used to call personalizeWebsiteContent based on the above business requirement?",
    "options": [
      "A. document.addEventListener(''onDOMContextLoaded', personalizeWebsiteContext);",
      "B. window.addEventListener('load',personalizeWebsiteContext);",
      "C. Document.addEventListener('''DOMContextLoaded' , personalizeWebsiteContext);",
      "D. window.addEventListener('onload', personalizeWebsiteContext);"
    ],
    "answer": "B",
    "title": "Question 10",
    "explanation": ""
  },
  {
    "content": "A developer is required to write a function that calculates the sum of elements in an array but is getting undefined every time the code is executed. The developer needs to find what is missing in the code below.\nConst sumFunction = arr => {\nReturn arr.reduce((result, current) => {\n//\nResult += current;\n//\n), 10);\n);\nWhich option makes the code work as expected?",
    "options": [
      "A. Replace line 02 with return arr.map(( result, current) => (",
      "B. Replace line 03 with if(arr.length == 0 ) ( return 0; )",
      "C. Replace line 04 with result = result +current;",
      "D. Replace line 05 with return result;"
    ],
    "answer": "D",
    "title": "Question 11",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst pi = 3.1415326,\nWhat is the data type of pi?",
    "options": ["A. Float", "B. Double", "C. Decimal", "D. Number"],
    "answer": "D",
    "title": "Question 12",
    "explanation": ""
  },
  {
    "content": "The developer wants to test the array shown:\nconst arr = Array(5).fill(0)\nWhich two tests are the most accurate for this array ?\nChoose 2 answers:",
    "options": [
      "A. console.assert (arr.length >0);",
      "B. console.assert(arr[0] === 0 && arr[ arr.length] === 0);",
      "C. arr.forEach(elem => console.assert(elem === 0)) ;",
      "D. console.assert( arr.length === 5 );"
    ],
    "answer": "C,D",
    "title": "Question 13",
    "explanation": ""
  },
  {
    "content": "Given code below:\nsetTimeout (() => (\nconsole.log(1);\n). 0);\nconsole.log(2);\nNew Promise ((resolve, reject )) = > (\nsetTimeout(() => (\nreject(console.log(3));\n). 1000);\n)).catch(() => (\nconsole.log(4);\n));\nconsole.log(5);\nWhat is logged to the console?",
    "options": ["A. 1 2 4 3 5", "B. 1 2 5 3 4", "C. 2 5 1 3 4", "D. 2 1 4 3 5"],
    "answer": "C",
    "title": "Question 14",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nFunction Person(firstName, lastName, eyecolor) {\nthis.firstName =firstName;\nthis.lastName = lastName;\nthis.eyeColor = eyeColor;\n}\nPerson.job = 'Developer';\nconst myFather = new Person('John', 'Doe');\nconsole.log(myFather.job);\nWhat is the output after the code executes?",
    "options": [
      "A. Undefined",
      "B. Developer",
      "C. ReferenceError: eyeColor is not defined",
      "D. ReferenceError: assignment to undeclared variable \"Person\""
    ],
    "answer": "A",
    "title": "Question 15",
    "explanation": ""
  },
  {
    "content": "The developer wants to test this code:\nConst toNumber =(strOrNum) => strOrNum;\nWhich two tests are most accurate for this code?\nChoose 2 answers",
    "options": [
      "A. console.assert(Number.isNaN(toNumber()));",
      "B. console.assert(toNumber('-3') < 0);",
      "C. console.assert(toNumber('2') === 2);",
      "D. console.assert(toNumber () === NaN);"
    ],
    "answer": "B,C",
    "title": "Question 16",
    "explanation": ""
  },
  {
    "content": "A developer is asked to fix some bugs reported by users. To do that, the developer adds a breakpoint for debugging.\nFunction Car (maxSpeed, color){\nThis.maxspeed =masSpeed;\nThis.color = color;\nLet carSpeed = document.getElementById(' CarSpeed');\nDebugger;\nLet fourWheels =new Car (carSpeed.value, 'red');\nWhen the code execution stops at the breakpoint on line 06, which two types of information are available in the browser console ?\nChoose 2 answers:",
    "options": [
      "A. A variable displaying the number of instances created for the Car Object.",
      "B. The information stored in the window.localStorage property",
      "C. The style, event listeners and other attributes applied to the carSpeed DOM element",
      "D. The values of the carSpeed and fourWheels variables"
    ],
    "answer": "B,C",
    "title": "Question 17",
    "explanation": ""
  },
  {
    "content": "Which statement accurately describes an aspect of promises?",
    "options": [
      "A. Arguments for the callback function passed to .then() are optional.",
      "B. .then() manipulates and returns the original promise.",
      "C. .then() cannot be added after a catch.",
      "D. In a.then() function, returning results is not necessary since callbacks will catch the result of a previous promise."
    ],
    "answer": "A",
    "title": "Question 18",
    "explanation": ""
  },
  {
    "content": "A developer has the following array of student test grades:\nLet arr = [ 7, 8, 5, 8, 9 ];\nThe Teacher wants to double each score and then see an array of the students who scored more than 15 points.\nHow should the developer implement the request?",
    "options": [
      "A. Let arr1 = arr.filter(( val) => ( return val > 15 )) .map (( num) => ( return num *2 ))",
      "B. Let arr1 = arr.map((num) => num*2). Filter (( val) => val > 15);",
      "C. Let arr1 = arr.mapBy (( num) => ( return num *2 )) .filterBy (( val ) => return val > 15 )) ;",
      "D. Let arr1 = arr.map((num) => ( num *2)).filterBy((val) => ( val >15 ));"
    ],
    "answer": "B",
    "title": "Question 19",
    "explanation": ""
  },
  {
    "content": "A developer wrote a fizzbuzz function that when passed in a number, returns the following:\n* 'Fizz' if the number is divisible by 3.\n* 'Buzz' if the number is divisible by 5.\n* 'Fizzbuzz' if the number is divisible by both 3 and 5.\n* Empty string if the number is divisible by neither 3 or 5.\nWhich two test cases will properly test scenarios for the fizzbuzz function?\nChoose 2 answers",
    "options": [
      "A. let res = fizzbuzz(Infinity);\n         console.assert ( res === ' ' )",
      "B. let res = fizzbuzz(3);\n         console.assert ( res === ' buzz ' )",
      "C. let res = fizzbuzz(5);\n         console.assert ( res === ' ' );",
      "D. let res = fizzbuzz(15);\n         console.assert ( res === ' fizzbuzz ' )"
    ],
    "answer": "A,B,D",
    "title": "Question 20",
    "explanation": ""
  },
  {
    "content": "In which situation should a developer include a try .. catch block around their function call ?",
    "options": [
      "A. The function results in an out of memory issue.",
      "B. The function contains scheduled code.",
      "C. The function has an error that should not be silenced.",
      "D. The function might raise a runtime error that needs to be handled."
    ],
    "answer": "D",
    "title": "Question 21",
    "explanation": ""
  },
  {
    "content": "Which statement accurately describes the behaviour of the async/ await keyworks ?",
    "options": [
      "A. The associated function can only be called via asynchronous methods",
      "B. The associated sometimes returns a promise.",
      "C. The associated function will always return a promise",
      "D. The associated class contains some asynchronous functions."
    ],
    "answer": "C",
    "title": "Question 22",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nLet x =('15' + 10)*2;\nWhat is the value of a?",
    "options": ["A. 1520", "B. 35", "C. 3020", "D. 50"],
    "answer": "C",
    "title": "Question 23",
    "explanation": ""
  },
  {
    "content": "Which two code snippets show working examples of a recursive function?\nChoose 2 answers",
    "options": [
      "A. Let countingDown = function(startNumber) {\n         If ( startNumber >0) {\n         console.log(startNumber) ;\n         return countingDown(startNUmber);\n         } else {\n         return startNumber;\n         }};",
      "B. Function factorial ( numVar ) {\n         If (numVar < 0) return;\n         If ( numVar === 0 ) return 1;\n         return numVar -1;",
      "C. Const factorial =numVar => {\n         If (numVar < 0) return;\n         If ( numVar === 0 ) return 1;\n         return numVar * factorial ( numVar - 1 );\n         };",
      "D. Const sumToTen = numVar => {\n         If (numVar < 0)\n         Return;\n         return sumToTen(numVar + 1)};"
    ],
    "answer": "A,C",
    "title": "Question 24",
    "explanation": ""
  },
  {
    "content": "Refer to the code:\nGiven the code above, which three properties are set pet1?\nChoose 3 answers:",
    "options": ["A. Owner", "B. Name", "C. Type", "D. canTalk", "E. Size"],
    "answer": "C,D,E",
    "title": "Question 25",
    "explanation": ""
  },
  {
    "content": "Universal Containers (UC) notices that its application that allows users to search for accounts makes a network request each time a key is pressed. This results in too many requests for the server to handle.\n* Address this problem, UC decides to implement a debounce function on string change handler.\nWhat are three key steps to implement this debounce function?\nChoose 3 answers:",
    "options": [
      "A. Store the timeId of the setTimeout last enqueued by the search string change handle.",
      "B. If there is an existing setTimeout and the search string change, allow the existing setTimeout to finish, and do not enqueue a new setTimeout.",
      "C. Ensure that the network request has the property debounce set to true.",
      "D. When the search string changes, enqueue the request within a setTimeout.",
      "E. If there is an existing setTimeout and the search string changes, cancel the existing setTimeout using the persisted timerId and replace it with a new setTimeout."
    ],
    "answer": "B,C,D",
    "title": "Question 26",
    "explanation": ""
  },
  {
    "content": "A developer has an ErrorHandler module that contains multiple functions.\nWhat kind of export be leverages so that multiple functions can be used?",
    "options": ["A. Multi", "B. Named", "C. All", "D. Default"],
    "answer": "B",
    "title": "Question 27",
    "explanation": ""
  },
  {
    "content": "Refer to the following array:\nLet arr1 = [ 1, 2, 3, 4, 5 ];\nWhich two lines of code result in a second array, arr2 being created such that arr2 is not a reference to arr1?",
    "options": [
      "A. Let arr2 = Array.from(arr1);",
      "B. Let arr2 = arr1;",
      "C. Let arr2 = arr1.sort();",
      "D. Let arr2 = arr1.slice(0, 5);"
    ],
    "answer": "A,D",
    "title": "Question 28",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet foodMenu1 = ['pizza', 'burger', 'French fries'];\nLet finalMenu = foodMenu1;\nfinalMenu.push('Garlic bread');\nWhat is the value of foodMenu1 after the code executes?",
    "options": [
      "A. [ 'Garlic bread']",
      "B. [ 'pizza','Burger', 'French fires']",
      "C. [ 'pizza','Burger', 'French fires', 'Garlic bread']",
      "D. [ 'Garlic bread' , 'pizza','Burger', 'French fires' ]"
    ],
    "answer": "B",
    "title": "Question 29",
    "explanation": ""
  },
  {
    "content": "A developer creates an object where its properties should be immutable and prevent properties from being added or modified.\nWhich method should be used to execute this business requirement ?",
    "options": [
      "A. Object.freeze()",
      "B. Object.lock()",
      "C. Object.const()",
      "D. Object.eval()"
    ],
    "answer": "A",
    "title": "Question 30",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nLet first = 'who';\nLet second = 'what';\nTry{\nTry{\nThrow new error('Sad trombone');\n}catch (err){\nFirst ='Why';\n}finally {\nSecond ='when';\n} catch (err) {\nSecond ='Where';\n}\nWhat are the values for first and second once the code executes ?",
    "options": [
      "A. First is why and second is when",
      "B. First is who and second is where",
      "C. First is Who and second is When",
      "D. First is why and second is where"
    ],
    "answer": "A",
    "title": "Question 31",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet sampleText = 'The quick brown fox jumps';\nA developer needs to determine if a certain substring is part of a string.\nWhich three expressions return true for the given substring ?\nChoose 3 answers",
    "options": [
      "A. sampleText.includes(' quick ') !== -1;",
      "B. sampleText.includes(' quick ', 4);",
      "C. sampleText.includes('fox');",
      "D. sampleText.includes(' fox ');",
      "E. sampleText.includes(' Fox ', 3)"
    ],
    "answer": "A,B,D",
    "title": "Question 32",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nLet x =null;\nconsole.log(typeof x);\nWhat is the output of the line 02?",
    "options": ["A. \"Null\"", "B. \"undefined\"", "C. \"X\"", "D. \"Object\""],
    "answer": "D",
    "title": "Question 33",
    "explanation": ""
  },
  {
    "content": "A developer wrote the following code:\n01 let X = object.value;\n02\n03 try {\n04 handleObjectValue(X);\n05 } catch (error) {\n06 handleError(error);\n07 }\nThe developer has a getNextValue function to execute after handleObjectValue(), but does not want to execute getNextValue() if an error occurs.\nHow can the developer change the code to ensure this behavior?",
    "options": [
      "A. 03 try{\n         04 handleObjectValue(x);\n         05 } catch(error){\n         06 handleError(error);\n         07 } then {\n         08 getNextValue();\n         09 }",
      "B. 03 try {\n         04 handleObjectValue(x)\n         05 ........................",
      "C. 03 try{\n         04 handleObjectValue(x);\n         05 } catch(error){\n         06 handleError(error);\n         07 }\n         08 getNextValue();",
      "D. 03 try{\n         04 handleObjectValue(x);\n         05 } catch(error){\n         06 handleError(error);\n         07 } finally {\n         08 getNextValue();\n         10 }"
    ],
    "answer": "B",
    "title": "Question 34",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 let car1 = new promise((_, reject) =>\n02 setTimeout(reject, 2000, \"Car 1 crashed in\"));\n03 let car2 = new Promise(resolve => setTimeout(resolve, 1500, \"Car 2\ncompleted\"));\n04 let car3 = new Promise(resolve => setTimeout (resolve, 3000, \"Car 3\nCompleted\"));\n05 Promise.race([car1, car2, car3])\n06 .then(value => (\n07 let result = $(value) the race. `;\n08 ))\n09 .catch( arr => (\n10 console.log(\"Race is cancelled.\", err);\n11 ));\nWhat is the value of result when Promise.race executes?",
    "options": [
      "A. Car 1 crashed in the race.",
      "B. Car 3 completed the race.",
      "C. Race is cancelled.",
      "D. Car 2 completed the race."
    ],
    "answer": "D",
    "title": "Question 35",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst searchTest = 'Yay! Salesforce is amazing!\" ;\nLet result1 = searchText.search(/sales/i);\nLet result 21 = searchText.search(/sales/i);\nconsole.log(result1);\nconsole.log(result2);\nAfter running this code, which result is displayed on the console?",
    "options": [
      "A. > true > false",
      "B. > 5 >undefined",
      "C. > 5 > -1",
      "D. > 5 > 0"
    ],
    "answer": "B",
    "title": "Question 36",
    "explanation": ""
  },
  {
    "content": "A developer wants to set up a secure web server with Node.js. The developer creates a directory locally called app-server, and the first file is app-server/index.js Without using any third-party libraries, what should the developer add to index.js to create the secure web server?",
    "options": [
      "A. const http =require('http');",
      "B. const tls = require('tls');",
      "C. const https =require('https');",
      "D. const server =require('secure-server');"
    ],
    "answer": "C",
    "title": "Question 37",
    "explanation": ""
  },
  {
    "content": "developer wants to use a module named universalContainersLib and them call functions from it.\nHow should a developer import every function from the module and then call the fuctions foo and bar ?",
    "options": [
      "A. import * ad lib from '/path/universalContainersLib.js';\n         lib.foo();\n         lib.bar();",
      "B. import * from '/path/universalContaineraLib.js';\n         universalContainersLib.foo();\n         universalContainersLib.bar();",
      "C. import (foo, bar) from '/path/universalContainersLib.js';\n         foo();\n         bar();",
      "D. import all from '/path/universalContaineraLib.js';\n         universalContainersLib.foo();\n         universalContainersLib.bar();"
    ],
    "answer": "A",
    "title": "Question 38",
    "explanation": ""
  },
  {
    "content": "Which option is true about the strict mode in imported modules?",
    "options": [
      "A. Add the statement use strict =false; before any other statements in the module to enable not- strict mode.",
      "B. Imported modules are in strict mode whether you declare them as such or not.",
      "C. You can only reference notStrict() functions from the imported module.",
      "D. Add the statement use non-strict, before any other statements in the module to enable not-strict mode."
    ],
    "answer": "C",
    "title": "Question 39",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nFunction muFunction(reassign){\nLet x = 1;\nvar y = 1;\nif( reassign ) {\nLet x= 2;\nVar y = 2;\nconsole.log(x);\nconsole.log(y);}\nconsole.log(x);\nconsole.log(y);}\nWhat is displayed when myFunction(true) is called?",
    "options": [
      "A. 2 2 undefined undefined",
      "B. 2 2 1 1",
      "C. 2 2 2 2",
      "D. 2 2 1 2"
    ],
    "answer": "D",
    "title": "Question 40",
    "explanation": ""
  },
  {
    "content": "Universal Container(UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions that cause this problem. To verify this, the developer decides to do everything and log the time each of these three suspicious functions consumes.\nconsole.time('Performance');\nmaybeAHeavyFunction();\nthisCouldTakeTooLong();\norMaybeThisOne();\nconsole.endTime('Performance');\nWhich function can the developer use to obtain the time spent by every one of the three functions?",
    "options": [
      "A. console.getTime()",
      "B. console.timeStamp()",
      "C. console.trace()",
      "D. console.timeLog()"
    ],
    "answer": "D",
    "title": "Question 41",
    "explanation": ""
  },
  {
    "content": "A developer receives a comment from the Tech Lead that the code given below has error:\nconst monthName = 'July';\nconst year = 2019;\nif(year === 2019) {\nmonthName = 'June';\n}\nWhich line edit should be made to make this code run?",
    "options": [
      "A. 02 const year = 2020;",
      "B. 02 let year =2019;",
      "C. 03 if (year == 2019) {",
      "D. 01 let monthName ='July';"
    ],
    "answer": "D",
    "title": "Question 42",
    "explanation": ""
  },
  {
    "content": "Given HTML below:\n<div>\n<div id =\"row-uc\"> Universal Container</div>\n<div id =\"row-aa\">Applied Shipping</div>\n<div id =\"row-bt\"> Burlington Textiles </div>\n</div>\nWhich statement adds the priority = account CSS class to the universal COntainers row ?",
    "options": [
      "A. Document .queryElementById('row-uc').addclass('priority-account');",
      "B. Document .querySelector('#row-uc').classes.push('priority-account');",
      "C. Document .querySelectorALL('#row-uc').classList.add('priority-account');",
      "D. Document .querySelector('#row-uc').classList.add('priority-account');"
    ],
    "answer": "A",
    "title": "Question 43",
    "explanation": ""
  },
  {
    "content": "A team that works on a big project uses npm to deal with projects dependencies.\nA developer added a dependency does not get downloaded when they execute npm install.\nWhich two reasons could be possible explanations for this?\nChoose 2 answers",
    "options": [
      "A. The developer missed the option --save when adding the dependency.",
      "B. The developer added the dependency as a dev dependency, and NODE_ENV is set to production.",
      "C. The developer added the dependency as a dev dependency, and\n         NODE_ENV\n         Is set to production.",
      "D. The developer missed the option --add when adding the dependency."
    ],
    "answer": "A,B,C",
    "title": "Question 44",
    "explanation": ""
  },
  {
    "content": "Refer to following code block:\nLet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,];\nLet output =0;\nFor (let num of array){\nif (output >0){\nBreak;\n}\nif(num % 2 == 0){\nContinue;\n}\nOutput +=num;\nWhat is the value of output after the code executes?",
    "options": ["A. 11", "B. 36", "C. 25", "D. 16"],
    "answer": "D",
    "title": "Question 45",
    "explanation": ""
  },
  {
    "content": "A developer implements and calls the following code when an application state change occurs:\nConst onStateChange =innerPageState) => {\nwindow.history.pushState(newPageState, ' ', null);\n}\nIf the back button is clicked after this method is executed, what can a developer expect?",
    "options": [
      "A. The page is navigated away from and the previous page in the browser's history is loaded.",
      "B. The page reloads and all Javascript is reinitialized.",
      "C. A navigate event is fired with a state property that details the previous application state.",
      "D. A popstate event is fired with a state property that details the application's last state."
    ],
    "answer": "A",
    "title": "Question 46",
    "explanation": ""
  },
  {
    "content": "developer has a web server running with Node.js. The command to start the web server is node server,js. The web server started having latency issues. Instead of a one second turn around for web requests, the developer now sees a five second turnaround, Which command can the web developer run to see what the module is doing during the latency period?",
    "options": [
      "A. NODE_DEBUG =true node server.js",
      "B. NODE_DEBUG =http, https node server.js",
      "C. DEBUG =true node server.js",
      "D. DEBUG = http, https node server.js"
    ],
    "answer": "C",
    "title": "Question 47",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet textValue = '1984';\nWhich code assignment shows a correct way to convert this string to an integer?",
    "options": [
      "A. Let numberValue = Integer(textValue);",
      "B. let numberValue = Number(textValue);",
      "C. Let numberValue = (Number)textValue;",
      "D. Let numberValue = textValue.toInteger();"
    ],
    "answer": "B",
    "title": "Question 48",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nconst copy = JSON.stringify([ new String(' false '), new Bollean( false ), undefined ]); What is the value of copy?",
    "options": [
      "A. -- [ \\\"false\\\" ,false, null ]--",
      "B. -- [ \\\"false\\\" , { } ]--",
      "C. -- [ \\\"false\\\" , false, undefined ]--",
      "D. -- [ false, { } ]--"
    ],
    "answer": "A",
    "title": "Question 49",
    "explanation": ""
  },
  {
    "content": "Which code statement correctly retrieves and returns an object from localStorage?",
    "options": [
      "A. const retrieveFromLocalStorage = () =>{\n         return JSON.stringify(window.localStorage.getItem(storageKey));\n         }",
      "B. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage.getItem(storageKey);\n         }",
      "C. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage[storageKey];\n         }",
      "D. const retrieveFromLocalStorage = (storageKey) =>{\n         return JSON.parse(window.localStorage.getItem(storageKey));\n         }"
    ],
    "answer": "D",
    "title": "Question 50",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nAsync funct on functionUnderTest(isOK) {\nIf (isOK) return 'OK' ;\nThrow new Error('not OK');\n)\nWhich assertion accuretely tests the above code?",
    "options": [
      "A. Console.assert (await functionUnderTest(true), ' not OK ') ",
      "B. Console.assert (await functionUnderTest(true), ' not OK ')",
      "C. Console.assert (await functionUnderTest(true), ' OK ')",
      "D. Console.assert (await functionUnderTest(true), 'OK')"
    ],
    "answer": "D",
    "title": "Question 51",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLine 05 causes an error.\nWhat are the values of greeting and salutation once code completes?",
    "options": [
      "A. Greeting is Hello and salutation is I say hello.",
      "B. Greeting is Goodbye and salutation is I say Hello.",
      "C. Greeting is Goodbye and salutation is Hello, Hello.",
      "D. Greeting is Hello and salutation is Hello, Hello."
    ],
    "answer": "D",
    "title": "Question 52",
    "explanation": ""
  }
]
