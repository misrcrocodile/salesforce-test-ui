[
  {
    "content": "Given the code below:\nWhich three code segments result in a correct conversion from number to string? Choose 3 answers",
    "options": [
      "A. let scrValue = String(numValue);",
      "B. let strValue = numValue. toString();",
      "C. let strValue = numValue.toText ();",
      "D. let strValue = * * 4 numValue;",
      "E. let strValue = (String)numValue;"
    ],
    "answer": "A,B,D",
    "title": "Question 1",
    "explanation": ""
  },
  {
    "content": "A developer has an is Dog function that takes one argument cat. They want to schedule the function to run every minute.\nWhat is the correct syntax for scheduling this function?",
    "options": ["A. setInterval(isDog, 60000,'cat');"],
    "answer": "A",
    "title": "Question 2",
    "explanation": ""
  },
  {
    "content": "Considering type coercion, what does the following expression evaluate to?\nTrue + '13' + NaN",
    "options": ["A. 14", "B. ' true13NaN '", "C. ' 113Nan '", "D. ' true13 '"],
    "answer": "B",
    "title": "Question 3",
    "explanation": ""
  },
  {
    "content": "Given the following code, what is the value of x?\nlet x = '15' + (10 * 2);",
    "options": ["A. 3020", "B. 50", "C. 1520", "D. 35"],
    "answer": "C",
    "title": "Question 4",
    "explanation": ""
  },
  {
    "content": "A Developer wrote the following code to test a sum3 function that takes in an array of numbers and returns the sum of the first three number in the array, The test passes:\nLet res = sum2([1, 2, 3 ]) ;\nconsole.assert(res === 6 );\nRes = sum3([ 1, 2, 3, 4]);\nconsole.assert(res=== 6);\nA different developer made changes to the behavior of sum3 to instead sum all of the numbers present in the array. The test passes:\nWhich two results occur when running the test on the updated sum3 function ?\nChoose 2 answers",
    "options": [
      "A. The line 02 assertion fails",
      "B. The line 02 assertion passes.",
      "C. The line 05 assertion fails.",
      "D. The line 05 assertion passes."
    ],
    "answer": "B,C",
    "title": "Question 5",
    "explanation": ""
  },
  {
    "content": "Refer to HTML below:\n<p> The current status of an Order: <span id =\"status\"> In Progress </span> </p>.\nWhich JavaScript statement changes the text 'In Progress' to 'Completed' ?",
    "options": [
      "A. document.getElementById(\"#status\").innerHTML = 'Completed' ;",
      "B. document.getElementById(\"status\").innerHTML = 'Completed' ;",
      "C. document.getElementById(\"status\").Value = 'Completed' ;",
      "D. document.getElementById(\".status\").innerHTML = 'Completed' ;"
    ],
    "answer": "B",
    "title": "Question 6",
    "explanation": ""
  },
  {
    "content": "At Universal Containers, every team has its own way of copying JavaScript objects. The code snippet shows an Implementation from one team:\nWhat is the output of the code execution?",
    "options": [
      "A. Hello Dan Doe",
      "B. Hello John Doe",
      "C. Hello Dan",
      "D. SyntaxError: Unexpected token in JSON"
    ],
    "answer": "D",
    "title": "Question 7",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\n<html lang=\"en\">\n<body>\n<div onclick = \"console.log('Outer message') ;\">\n<button id =\"myButton\">CLick me<button>\n</div>\n</body>\n<script>\nfunction displayMessage(ev) {\nev.stopPropagation();\nconsole.log('Inner message.');\n}\nconst elem = document.getElementById('myButton');\nelem.addEventListener('click' , displayMessage);\n</script>\n</html>\nWhat will the console show when the button is clicked?",
    "options": [
      "A. Inner message\n         Outer message",
      "B. Inner message",
      "C. Outer message",
      "D. Outer message\n         Inner message"
    ],
    "answer": "B",
    "title": "Question 8",
    "explanation": ""
  },
  {
    "content": "A developer wants to use a try...catch statement to catch any error that countSheep () may throw and pass it to a handleError () function.\nWhat is the correct implementation of the try...catch?\nA)\nB)\nC)\nD)",
    "options": ["A. Option ", "B. Option ", "C. Option", "D. Option "],
    "answer": "C",
    "title": "Question 9",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nWhat is the output of line 11?",
    "options": [
      "A. [\"foo\", \"bar\"]",
      "B. [\"foo:1\", \"bar:2\"]",
      "C. [1,2]",
      "D. [\"bar\", \"foo\"]"
    ],
    "answer": "A",
    "title": "Question 10",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button> The developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done to make this code work as expected?",
    "options": [
      "A. Replace line 03 with const input = document.getElementByName('input');",
      "B. Replace line 02 with button.addEventListener(\"onclick\", function() {",
      "C. Replace line 02 with button.addCallback(\"click\", function() {",
      "D. Replace line 04 with console.log(input .value);"
    ],
    "answer": "D",
    "title": "Question 11",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhich value can a developer expect when referencing country,capital,cityString?",
    "options": ["A. 'NaN'", "B. An error", "C. undefined", "D. 'London'"],
    "answer": "A",
    "title": "Question 12",
    "explanation": ""
  },
  {
    "content": "Given the code below:\n01 function GameConsole (name) {\n02 this.name = name;\n03 }\n04\n05 GameConsole.prototype.load = function(gamename) {\n06 console.log( ` $(this.name) is loading a game : $(gamename) ...`);\n07 )\n08 function Console 16 Bit (name) {\n09 GameConsole.call(this, name) ;\n10 }\n11 Console16bit.prototype = Object.create ( GameConsole.prototype) ;\n12 //insert code here\n13 console.log( ` $(this.name) is loading a cartridge game : $(gamename) ...`);\n14 }\n15 const console16bit = new Console16bit(' SNEGeneziz ');\n16 console16bit.load(' Super Nonic 3x Force ');\nWhat should a developer insert at line 15 to output the following message using the method ?\n> SNEGeneziz is loading a cartridge game: Super Monic 3x Force . . .",
    "options": [
      "A. Console16bit.prototype.load = function(gamename) {",
      "B. Console16bit.prototype.load(gamename) = function() {",
      "C. Console16bit = Object.create(GameConsole.prototype).load = function\n         (gamename) {",
      "D. Console16bit.prototype.load(gamename) {"
    ],
    "answer": "A",
    "title": "Question 13",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nWhat is the output of line 02?",
    "options": ["A. 'object\"", "B. \"undefined\" 0", "C. \"null\"", "D. \"x-"],
    "answer": "A",
    "title": "Question 14",
    "explanation": ""
  },
  {
    "content": "Consider type coercion, what does the following expression evaluate to?\nTrue + 3 + '100' + null",
    "options": ["A. '4100null'", "B. 4100", "C. '3100null'", "D. 104"],
    "answer": "A",
    "title": "Question 15",
    "explanation": ""
  },
  {
    "content": "Which code change should be done for the console to log the following when 'Click me!' is clicked'\n> Row log\n> Table log",
    "options": [
      "A. Change line 10 to event.stopPropagation (false) ;",
      "B. Remove lines 13 and 14",
      "C. Change line 14 to elem.addEventListener ('click', printMessage, true);",
      "D. Remove line 10"
    ],
    "answer": "A",
    "title": "Question 16",
    "explanation": ""
  },
  {
    "content": "is below:\n<input type=\"file\" onchange=\"previewFile()\">\n<img src=\"\" height=\"200\" alt=\"Image Preview...\"/>\nThe JavaScript portion is:\n01 function previewFile(){\n02 const preview = document.querySelector('img');\n03 const file = document.querySelector('input[type=file]').files[0];\n04 //line 4 code\n05 reader.addEventListener(\"load\", () => {\n06 preview.src = reader.result;\n07 },false);\n08 //line 8 code\n09 }\nIn lines 04 and 08, which code allows the user to select an image from their local computer , and to display the image in the browser?",
    "options": [
      "A. 04 const reader = new FileReader();\n         08 if (file) URL.createObjectURL(file);",
      "B. 04 const reader = new File();\n         08 if (file) reader.readAsDataURL(file);",
      "C. 04 const reader = new File();\n         08 if (file) URL.createObjectURL(file);",
      "D. 04 const reader = new FileReader();\n         08 if (file) reader.readAsDataURL(file);"
    ],
    "answer": "D",
    "title": "Question 17",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a specific element, myElement on the page had been clicked?",
    "options": ["A. event.target.id =='myElement'"],
    "answer": "A",
    "title": "Question 18",
    "explanation": ""
  },
  {
    "content": "Refer to the code snippet below:\nLet array = [1, 2, 3, 4, 4, 5, 4, 4];\nFor (let i =0; i < array.length; i++){\nif (array[i] === 4) {\narray.splice(i, 1);\n}\n}\nWhat is the value of the array after the code executes?",
    "options": [
      "A. [1, 2, 3, 4, 4, 5, 4]",
      "B. [1, 2, 3, 4, 5, 4, 4]",
      "C. [1, 2, 3, 4, 5, 4]",
      "D. [1, 2, 3, 5]"
    ],
    "answer": "C",
    "title": "Question 19",
    "explanation": ""
  },
  {
    "content": "Refer to the code declarations below:\nWhich three expressions return the string JavaScript?\nChoose 3 answers",
    "options": [
      "A. $(str1) $ (str2} ';",
      "B. Str1 + str2;",
      "C. Concat (str1, str2);",
      "D. Str1.join (str2);",
      "E. Str1.concat (str2);"
    ],
    "answer": "A,B,E",
    "title": "Question 20",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet sampleText = 'The quick brown fox jumps';\nA developer needs to determine if a certain substring is part of a string.\nWhich three expressions return true for the given substring ?\nChoose 3 answers",
    "options": [
      "A. sampleText.includes(' quick ', 4);",
      "B. sampleText.includes(' quick ') !== -1;",
      "C. sampleText.includes(' Fox ', 3)",
      "D. sampleText.includes('fox');",
      "E. sampleText.includes(' fox ');"
    ],
    "answer": "A,B,E",
    "title": "Question 21",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nconst copy = JSON.stringify([ new String(' false '), new Bollean( false ), undefined ]); What is the value of copy?",
    "options": [
      "A. -- [ \\\"false\\\" , { } ]--",
      "B. -- [ false, { } ]--",
      "C. -- [ \\\"false\\\" ,false, null ]--",
      "D. -- [ \\\"false\\\" , false, undefined ]--"
    ],
    "answer": "C",
    "title": "Question 22",
    "explanation": ""
  },
  {
    "content": "developer creates a new web server that uses Node.js. It imports a server library that uses events and callbacks for handling server functionality.\nThe server library is imported with require and is made available to the code by a variable named server. The developer wants to log any issues that the server has while booting up.\nGiven the code and the information the developer has, which code logs an error at boost with an event?",
    "options": [
      "A. Try{\n         server.start();\n         } catch(error) {\n         console.log('ERROR', error);\n         }",
      "B. Server.catch ((server) => {\n         console.log('ERROR', error);\n         });",
      "C. Server.on ('error', (error) => {\n         console.log('ERROR', error);\n         });",
      "D. Server.error ((server) => {\n         console.log('ERROR', error);\n         });"
    ],
    "answer": "C",
    "title": "Question 23",
    "explanation": ""
  },
  {
    "content": "A developer has a formatName function that takes two arguments, firstName and lastName and returns a string. They want to schedule the function to run once after five seconds.\nWhat is the correct syntax to schedule this function?",
    "options": [
      "A. setTimeout ('formatName', 5000, 'John\", \"Doe');",
      "B. setTimout(() => { formatName(\"John', 'Doe') }, 5000);",
      "C. setTimeout (formatName('John', ''Doe'), 5000);",
      "D. setTimeout (formatName(), 5000, \"John\", \"BDoe\");"
    ],
    "answer": "A",
    "title": "Question 24",
    "explanation": ""
  },
  {
    "content": "A developer writes the code below to return a message to a user attempting to register a new username. If the username is available, a variable named nag is declared and assigned a value on line 03.\nWhat is the value of msg when getAvailableabilityMessage (\"newUserName\") is executed and get Availability (\"newUserName\") returns true?",
    "options": [
      "A. undefined",
      "B. \"newUserName\"",
      "C. \"User-name available\"",
      "D. \"msg is not defined\""
    ],
    "answer": "C",
    "title": "Question 25",
    "explanation": ""
  },
  {
    "content": "Which two console logs outputs NaN ?\nChoose 2 answers",
    "options": [
      "A. console.log(10/ Number('5'));",
      "B. console.log(10/0);",
      "C. console.log(parseInt('two'));",
      "D. console.log(10/ ''five);"
    ],
    "answer": "C,D",
    "title": "Question 26",
    "explanation": ""
  },
  {
    "content": "A developer receives a comment from the Tech Lead that the code given below has error:\nconst monthName = 'July';\nconst year = 2019;\nif(year === 2019) {\nmonthName = 'June';\n}\nWhich line edit should be made to make this code run?",
    "options": [
      "A. 03 if (year == 2019) {",
      "B. 02 let year =2019;",
      "C. 01 let monthName ='July';",
      "D. 02 const year = 2020;"
    ],
    "answer": "C",
    "title": "Question 27",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhat is the output of this function when called with an empty array?",
    "options": [
      "A. Return 0",
      "B. Return NaN",
      "C. Return Infinity",
      "D. Return 5"
    ],
    "answer": "D",
    "title": "Question 28",
    "explanation": ""
  },
  {
    "content": "A developer is wondering whether to use, Promise.then or Promise.catch, especially when a Promise throws an error?\nWhich two promises are rejected?\nWhich 2 are correct?",
    "options": [
      "A. Promise.reject('cool error here').catch(error => console.error(error));",
      "B. Promise.reject('cool error here').then(error => console.error(error));",
      "C. New Promise(() => (throw 'cool error here'}).then(null, error => console.error(error)));",
      "D. New Promise((resolve, reject) => (throw 'cool error here'}).catch(error => console.error(error)) ;"
    ],
    "answer": "A,D",
    "title": "Question 29",
    "explanation": ""
  },
  {
    "content": "What are two unique features of functions defined with a fat arrow as compared to normal function definition?\nChoose 2 answers",
    "options": [
      "A. If the function has a single expression in the function body, the expression will be evaluated and implicit returned.",
      "B. The function receives an argument that is always in scope, called parentThis, which is the enclosing lexical scope.",
      "C. The function uses the this from the enclosing scope.",
      "D. The function generated its own this making it useful for separating the function's scope from its enclosing scope."
    ],
    "answer": "A,D",
    "title": "Question 30",
    "explanation": ""
  },
  {
    "content": "Which three options show valid methods for creating a fat arrow function?\nChoose 3 answers",
    "options": [
      "A. [ ] => ( console.log(' executed ') ;)",
      "B. (x,y,z) => ( console.log(' executed ') ;)",
      "C. X,y,z => ( console.log(' executed ') ;)",
      "D. x => ( console.log(' executed ') ; )",
      "E. ( ) => ( console.log(' executed ') ;)"
    ],
    "answer": "B,D",
    "title": "Question 31",
    "explanation": ""
  },
  {
    "content": "Which javascript methods can be used to serialize an object into a string and deserialize a JSON string into an object, respectively?",
    "options": [
      "A. JSON.parse and JSON.deserialize",
      "B. JSON.stringify and JSON.parse",
      "C. JSON.serialize and JSON.deserialize",
      "D. JSON.encode and JSON.decode"
    ],
    "answer": "B",
    "title": "Question 32",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nLet first = 'who';\nLet second = 'what';\nTry{\nTry{\nThrow new error('Sad trombone');\n}catch (err){\nFirst ='Why';\n}finally {\nSecond ='when';\n} catch (err) {\nSecond ='Where';\n}\nWhat are the values for first and second once the code executes ?",
    "options": [
      "A. First is why and second is when",
      "B. First is who and second is where",
      "C. First is Who and second is When",
      "D. First is why and second is where"
    ],
    "answer": "A",
    "title": "Question 33",
    "explanation": ""
  },
  {
    "content": "Which code statement correctly retrieves and returns an object from localStorage?",
    "options": [
      "A. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage[storageKey];\n         }",
      "B. const retrieveFromLocalStorage = () =>{\n         return JSON.stringify(window.localStorage.getItem(storageKey));\n         }",
      "C. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage.getItem(storageKey);\n         }",
      "D. const retrieveFromLocalStorage = (storageKey) =>{\n         return JSON.parse(window.localStorage.getItem(storageKey));\n         }"
    ],
    "answer": "D",
    "title": "Question 34",
    "explanation": ""
  },
  {
    "content": "A developer has an ErrorHandler module that contains multiple functions.\nWhat kind of export be leverages so that multiple functions can be used?",
    "options": ["A. Multi", "B. Named", "C. Default", "D. All"],
    "answer": "B",
    "title": "Question 35",
    "explanation": ""
  },
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Error", "B. Assert", "C. Log", "D. Message", "E. Info"],
    "answer": "A,C,E",
    "title": "Question 36",
    "explanation": ""
  },
  {
    "content": "developer uses the code below to format a date.\nAfter executing, what is the value of formattedDate?",
    "options": [
      "A. June 10, 2020",
      "B. May 10, 2020",
      "C. November 05, 2020",
      "D. October 05, 2020"
    ],
    "answer": "A",
    "title": "Question 37",
    "explanation": ""
  },
  {
    "content": "Which two options are core Node.js modules?\nChoose 2 answers",
    "options": ["A. isotream", "B. http", "C. exception", "D. worker"],
    "answer": "A,B",
    "title": "Question 38",
    "explanation": ""
  },
  {
    "content": "Cloud Kicks has a class to represent items for sale in an online store, as shown below:\nClass Item{\nconstructor (name, price){\nthis.name = name;\nthis.price = price;\n}\nformattedPrice(){\nreturn 's' + String(this.price);}}\nA new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes.\nWhich line of code properly declares the clothingItem class such that it inherits from Item?",
    "options": [
      "A. Class ClothingItem implements Item{",
      "B. Class ClothingItem {",
      "C. Class ClothingItem extends Item {",
      "D. Class ClothingItem super Item {"
    ],
    "answer": "C",
    "title": "Question 39",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nSetcurrent URL ();\nconsole.log('The current URL is: ' +url );\nfunction setCurrentUrl() {\nUrl = window.location.href:\nWhat happens when the code executes?",
    "options": [
      "A. The url variable has global scope and line 02 executes correctly.",
      "B. The url variable has local scope and line 02 throws an error.",
      "C. The url variable has global scope and line 02 throws an error.",
      "D. The url variable has local scope and line 02 executes correctly."
    ],
    "answer": "A",
    "title": "Question 40",
    "explanation": ""
  },
  {
    "content": "Which statement accurately describes the behaviour of the async/ await keyworks ?",
    "options": [
      "A. The associated function will always return a promise",
      "B. The associated sometimes returns a promise.",
      "C. The associated class contains some asynchronous functions.",
      "D. The associated function can only be called via asynchronous methods"
    ],
    "answer": "A",
    "title": "Question 41",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLine 05 causes an error.\nWhat are the values of greeting and salutation once code completes?",
    "options": [
      "A. Greeting is Goodbye and salutation is I say Hello.",
      "B. Greeting is Hello and salutation is Hello, Hello.",
      "C. Greeting is Hello and salutation is I say hello.",
      "D. Greeting is Goodbye and salutation is Hello, Hello."
    ],
    "answer": "B",
    "title": "Question 42",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst pi = 3.1415326,\nWhat is the data type of pi?",
    "options": ["A. Number", "B. Float", "C. Double", "D. Decimal"],
    "answer": "A",
    "title": "Question 43",
    "explanation": ""
  },
  {
    "content": "Given the HTML below:\nWhich statement adds the priority-account css class to the Applied Shipping row?",
    "options": [
      "A. document.querySelector('#row-as').classList.add('priority-account');"
    ],
    "answer": "A",
    "title": "Question 44",
    "explanation": ""
  },
  {
    "content": "developer removes the HTML class attribute from the checkout button, so now it is simply:\n<button>Checkout</button>.\nThere is a test to verify the existence of the checkout button, however it looks for a button with class= \"blue\". The test fails because no such button is found.\nWhich type of test category describes this test?",
    "options": [
      "A. True negative",
      "B. False positive",
      "C. False negative",
      "D. True positive"
    ],
    "answer": "C",
    "title": "Question 45",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet inArray =[ [ 1, 2 ] , [ 3, 4, 5 ] ];\nWhich two statements result in the array [1, 2, 3, 4, 5] ?\nChoose 2 answers",
    "options": [
      "A. [ ]. Concat.apply ([ ], inArray);",
      "B. [ ]. concat ( [ ....inArray ] );",
      "C. [ ]. concat.apply(inArray, [ ]);",
      "D. [ ]. Concat (... inArray);"
    ],
    "answer": "A,D",
    "title": "Question 46",
    "explanation": ""
  },
  {
    "content": "Universal Containers (UC) notices that its application that allows users to search for accounts makes a network request each time a key is pressed. This results in too many requests for the server to handle.\n* Address this problem, UC decides to implement a debounce function on string change handler.\nWhat are three key steps to implement this debounce function?\nChoose 3 answers:",
    "options": [
      "A. Store the timeId of the setTimeout last enqueued by the search string change handle.",
      "B. If there is an existing setTimeout and the search string changes, cancel the existing setTimeout using the persisted timerId and replace it with a new setTimeout.",
      "C. Ensure that the network request has the property debounce set to true.",
      "D. If there is an existing setTimeout and the search string change, allow the existing setTimeout to finish, and do not enqueue a new setTimeout.",
      "E. When the search string changes, enqueue the request within a setTimeout."
    ],
    "answer": "C,D,E",
    "title": "Question 47",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nfunction test (val) {\nIf (val === undefined) {\nreturn 'Undefined values!' ;\n}\nif (val === null) {\nreturn 'Null value! ';\n}\nreturn val;\n}\nLet x;\ntest(x);\nWhat is returned by the function call on line 13?",
    "options": [
      "A. Undefined",
      "B. 'Null value!'",
      "C. Line 13 throws an error.",
      "D. 'Undefined values!'"
    ],
    "answer": "D",
    "title": "Question 48",
    "explanation": ""
  },
  {
    "content": "Given the expressions var1 and var2, what are two valid ways to return the concatenation of the two expressions and ensure it is string? Choose 2 answers",
    "options": [
      "A. String (var1) .concat (var2)",
      "B. var1 + var2",
      "C. var1.toString ( ) var2.toString ( )",
      "D. string.concat (var1 +var2)"
    ],
    "answer": "C,D",
    "title": "Question 49",
    "explanation": ""
  },
  {
    "content": "Given the following code:\ndocument.body.addEventListener(' click ', (event) => {\nif (/* CODE REPLACEMENT HERE */) {\nconsole.log('button clicked!');\n)\n});\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",
    "options": [
      "A. e.nodeTarget ==this",
      "B. event.target.nodeName == 'BUTTON'",
      "C. button.addEventListener('click')",
      "D. Event.clicked"
    ],
    "answer": "B",
    "title": "Question 50",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nconsole.log(0);\nsetTimeout(() => (\nconsole.log(1);\n});\nconsole.log(2);\nsetTimeout(() => {\nconsole.log(3);\n), 0);\nconsole.log(4);\nIn which sequence will the numbers be logged?",
    "options": ["A. 13024", "B. 02413", "C. 02431", "D. 01234"],
    "answer": "C",
    "title": "Question 51",
    "explanation": ""
  },
  {
    "content": "Refer to the code snippet:\nFunction getAvailabilityMessage(item) {\nIf (getAvailability(item)){\nVar msg =\"Username available\";\n}\nReturn msg;\n}\nA developer writes this code to return a message to user attempting to register a new username. If the username is available, variable.\nWhat is the return value of msg hen getAvailabilityMessage (\"newUserName\" ) is executed and getAvailability(\"newUserName\") returns false?",
    "options": [
      "A. \"Msg is not defined\"",
      "B. \"newUserName\"",
      "C. \"Username available\"",
      "D. undefined"
    ],
    "answer": "D",
    "title": "Question 52",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst searchTest = 'Yay! Salesforce is amazing!\" ;\nLet result1 = searchText.search(/sales/i);\nLet result 21 = searchText.search(/sales/i);\nconsole.log(result1);\nconsole.log(result2);\nAfter running this code, which result is displayed on the console?",
    "options": [
      "A. > 5 > 0",
      "B. > 5 > -1",
      "C. > true > false",
      "D. > 5 >undefined"
    ],
    "answer": "D",
    "title": "Question 53",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nfor(let number =2 ; number <= 5 ; number += 1 ) {\n// insert code statement here\n}\nThe developer needs to insert a code statement in the location shown. The code statement has these requirements:\n1. Does require an import\n2. Logs an error when the boolean statement evaluates to false\n3. Works in both the browser and Node.js\nWhich meet the requirements?",
    "options": [
      "A. console.error(number % 2 === 0);",
      "B. assert (number % 2 === 0);",
      "C. console.debug(number % 2 === 0);",
      "D. console.assert(number % 2 === 0);"
    ],
    "answer": "A",
    "title": "Question 54",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet timeFunction =() => {\nconsole.log('Timer called.\");\n};\nlet timerId = setTimeout (timedFunction, 1000);\nWhich statement allows a developer to cancel the scheduled timed function?",
    "options": [
      "A. removeTimeout(timedFunction);",
      "B. removeTimeout(timerId);",
      "C. clearTimeout(timerId);",
      "D. clearTimeout(timedFunction);"
    ],
    "answer": "C",
    "title": "Question 55",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nWhat will be the first four numbers logged?",
    "options": ["A. 0012", "B. 0123", "C. 0112", "D. 0122"],
    "answer": "C",
    "title": "Question 56",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhat is the value of result when the code executes?",
    "options": ["A. 10-5", "B. 10-10", "C. 5-10", "D. 5-5"],
    "answer": "B",
    "title": "Question 57",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet car1 = new Promise((_ ,reject)=> setTimeout(reject,2000,\"Car1 crashed in\")); let car2 = new Promise(resolve => setTimeout(resolve,1500,\"Car2 completed\")); let car3 = new Promise(resolve => setTimeout(resolve,3000,\"Car3 completed\")); Promise.race([car1,car2,car3])\n.then(value=>{\nlet result = `${value} the race.`;\n}).catch(err=>{\nconsole.log('Race is cancelled.',err);\n});\nWhat is the value of result when promise.race execues?",
    "options": ["A. Car2 completed the race."],
    "answer": "A",
    "title": "Question 58",
    "explanation": ""
  },
  {
    "content": "Refer to the code:\nGiven the code above, which three properties are set pet1?\nChoose 3 answers:",
    "options": ["A. Owner", "B. Size", "C. canTalk", "D. Type", "E. Name"],
    "answer": "B,C,D",
    "title": "Question 59",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button>\nThe developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done make this code work as expected?",
    "options": [
      "A. Replace line 03 with const input = document.getElementByName('input');",
      "B. Replace line 02 with button.addCallback(\"click\", function() {",
      "C. Replace line 02 with button.addEventListener(\"onclick\", function() {",
      "D. Replace line 04 with console.log(input .value);"
    ],
    "answer": "D",
    "title": "Question 60",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet o = {\nget js() {\nlet city1 = String(\"st. Louis\");\nlet city2 = String(\" New York\");\nreturn {\nfirstCity: city1.toLowerCase(),\nsecondCity: city2.toLowerCase(),\n}\n}\n}\nWhat value can a developer expect when referencing o.js.secondCity?",
    "options": [
      "A. ' new york '",
      "B. Undefined",
      "C. An error",
      "D. ' New York '"
    ],
    "answer": "A",
    "title": "Question 61",
    "explanation": ""
  },
  {
    "content": "A developer writers the code below to calculate the factorial of a given number.\nFunction factorial(number) {\nReturn number + factorial(number -1);\n}\nfactorial(3);\nWhat is the result of executing line 04?",
    "options": ["A. 0", "B. 6", "C. -Infinity", "D. RuntimeError"],
    "answer": "D",
    "title": "Question 62",
    "explanation": ""
  },
  {
    "content": "What is the result of the code block?",
    "options": [
      "A. An error is thrown.",
      "B. The console logs 'flag' and then an error is thrown.",
      "C. The console logs only 'flag'.",
      "D. The console logs 'flag' and another flag."
    ],
    "answer": "B",
    "title": "Question 63",
    "explanation": ""
  },
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Message", "B. Info", "C. Log", "D. Error", "E. Assert"],
    "answer": "B,E",
    "title": "Question 64",
    "explanation": ""
  },
  {
    "content": "developer uses the code below to format a date.\nAfter executing, what is the value of formattedDate?",
    "options": [
      "A. May 10, 2020",
      "B. October 05, 2020",
      "C. November 05, 2020",
      "D. June 10, 2020"
    ],
    "answer": "A",
    "title": "Question 65",
    "explanation": ""
  },
  {
    "content": "Refer to the following object:\nconst cat ={\nfirstName: 'Fancy',\nlastName: ' Whiskers',\nGet fullName() {\nreturn this.firstName + ' ' + this.lastName;\n}\n};\nHow can a developer access the fullName property for cat?",
    "options": [
      "A. cat.get.fullName",
      "B. cat.fullName",
      "C. cat.function.fullName()",
      "D. cat.fullName()"
    ],
    "answer": "B",
    "title": "Question 66",
    "explanation": ""
  },
  {
    "content": "Refer to the HTML below:\n<div id=\"main\">\n<ul>\n<li>Leo</li>\n<li>Tony</li>\n<li>Tiger</li>\n</ul>\n</div>\nWhich JavaScript statement results in changing \" Tony\" to \"Mr. T.\"?",
    "options": [
      "A. document.querySelector('$main li.Tony').innerHTML = ' Mr. T. ';",
      "B. document.querySelector('$main li:nth-child(2)'),innerHTML = ' Mr. T. ';",
      "C. document.querySelector('$main li:second-child').innerHTML = ' Mr. T. ';",
      "D. document.querySelectorAll('$main $TONY').innerHTML = ' Mr. T. ';"
    ],
    "answer": "B",
    "title": "Question 67",
    "explanation": ""
  },
  {
    "content": "Given two expressions var1 and var2. What are two valid ways to return the logical AND of the two expressions and ensure it is data type Boolean ?\nChoose 2 answers:",
    "options": [
      "A. var1 && var2",
      "B. var1.toBoolean() && var2toBoolean()",
      "C. Boolean(var1 && var2)",
      "D. Boolean(var1) && Boolean(var2)"
    ],
    "answer": "C,D",
    "title": "Question 68",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\n01 function Tiger(){\n02 this.Type = 'Cat';\n03 this.size = 'large';\n04 }\n05\n06 let tony = new Tiger();\n07 tony.roar = () =>{\n08 console.log('They\\'re great1');\n09 };\n10\n11 function Lion(){\n12 this.type = 'Cat';\n13 this.size = 'large';\n14 }\n15\n16 let leo = new Lion();\n17 //Insert code here\n18 leo.roar();\nWhich two statements could be inserted at line 17 to enable the function call on line 18?\nChoose 2 answers.",
    "options": [
      "A. Leo.prototype.roar = () => { console.log('They\\'re pretty good:'); };",
      "B. Leo.roar = () => { console.log('They\\'re pretty good:'); };",
      "C. Object.assign(leo,tony);",
      "D. Object.assign(leo,Tiger);"
    ],
    "answer": "B,C",
    "title": "Question 69",
    "explanation": ""
  },
  {
    "content": "A developer wrote a fizzbuzz function that when passed in a number, returns the following:\n* 'Fizz' if the number is divisible by 3.\n* 'Buzz' if the number is divisible by 5.\n* 'Fizzbuzz' if the number is divisible by both 3 and 5.\n* Empty string if the number is divisible by neither 3 or 5.\nWhich two test cases will properly test scenarios for the fizzbuzz function?\nChoose 2 answers",
    "options": [
      "A. let res = fizzbuzz(15);\n         console.assert ( res === ' fizzbuzz ' )",
      "B. let res = fizzbuzz(3);\n         console.assert ( res === ' buzz ' )",
      "C. let res = fizzbuzz(5);\n         console.assert ( res === ' ' );",
      "D. let res = fizzbuzz(Infinity);\n         console.assert ( res === ' ' )"
    ],
    "answer": "A,B,D",
    "title": "Question 70",
    "explanation": ""
  },
  {
    "content": "A developer has the function, shown below, that is called when a page loads.\nfunction onload() {\nconsole.log(\"Page has loaded!\");\n}\nWhere can the developer see the log statement after loading the page in the browser?",
    "options": [
      "A. Browser javaScript console",
      "B. Terminal running the web server.",
      "C. Browser performance toots",
      "D. On the webpage."
    ],
    "answer": "A",
    "title": "Question 71",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nAsync funct on functionUnderTest(isOK) {\nIf (isOK) return 'OK' ;\nThrow new Error('not OK');\n)\nWhich assertion accuretely tests the above code?",
    "options": [
      "A. Console.assert (await functionUnderTest(true), ' not OK ')",
      "B. Console.assert (await functionUnderTest(true), ' OK ')",
      "C. Console.assert (await functionUnderTest(true), ' not OK ') ",
      "D. Console.assert (await functionUnderTest(true), 'OK')"
    ],
    "answer": "D",
    "title": "Question 72",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nCounter = 0;\nconst logCounter = () => {\nconsole.log(counter);\n);\nlogCounter();\nsetTimeout(logCOunter, 1100);\nsetInterval(() => {\nCounter++\nlogCounter();\n}, 1000);\nWhat is logged by the first four log statements?",
    "options": ["A. 0 1 2 2", "B. 0 1 2 3", "C. 0 1 1 2", "D. 0 0 1 2"],
    "answer": "C",
    "title": "Question 73",
    "explanation": ""
  },
  {
    "content": "A developer has the following array of hourly wages:\nLet arr = (8, 5, 9, 75, 11, 25, 7, 75, , 13, 25);\nFor workers making less than $10 an hour rate should be multiple by 1.25 and returned in a new array.\nHow should the developer implement the request?",
    "options": [
      "A. let arrl = arr.filterBy((val) => val < 10 ).aapBy<(num) -> num = ..25 );",
      "B. let arrl = arr .rr.acArray ((val) => ( val < 10 )) ,map((num) => { num * 1.25 ));",
      "C. let arrl = arr.filter((val) => val < 10).map((num) -> num = 1.25);",
      "D. let arrl = arr-map((num) => { return ran * 1.25 }).filter((val) -> { return val < 10));"
    ],
    "answer": "D",
    "title": "Question 74",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nfunction test (val) {\nIf (val === undefined) {\nreturn 'Undefined values!' ;\n}\nif (val === null) {\nreturn 'Null value! ';\n}\nreturn val;\n}\nLet x;\ntest(x);\nWhat is returned by the function call on line 13?",
    "options": [
      "A. 'Null value!'",
      "B. Undefined",
      "C. Line 13 throws an error.",
      "D. 'Undefined values!'"
    ],
    "answer": "B",
    "title": "Question 75",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 const server = require('server');\n02 /* Insert code here */\nA developer imports a library that creates a web server. The imported library uses events and callbacks to start the servers Which code should be inserted at the line 03 to set up an event and start the web server ?",
    "options": [
      "A. server()",
      "B. server.on(' connect ' , ( port) => {\n         console.log('Listening on ' , port) ;})",
      "C. Server.start ();",
      "D. console.log( 'Listening on ', port) ;",
      "E. serve(( port) => ("
    ],
    "answer": "B",
    "title": "Question 76",
    "explanation": ""
  },
  {
    "content": "Refer to the following code that imports a module named utils:\nimport (foo, bar) from '/path/Utils.js';\nfoo() ;\nbar() ;\nWhich two implementations of Utils.js export foo and bar such that the code above runs without error?\nChoose 2 answers",
    "options": [
      "A. const foo = () => { return 'foo' ; }\n         const bar = () => { return 'bar' ; }\n         export { bar, foo }",
      "B. // FooUtils.js and BarUtils.js exist\n         Import (foo) from '/path/FooUtils.js';\n         Import (boo) from ' /path/NarUtils.js';",
      "C. Export default class {\n         foo() { return 'foo' ; }\n         bar() { return 'bar' ; }\n         }",
      "D. const foo = () => { return 'foo';}\n         const bar = () => {return 'bar'; }\n         Export default foo, bar;"
    ],
    "answer": "A,C",
    "title": "Question 77",
    "explanation": ""
  },
  {
    "content": "A test has a dependency on database. query. During the test, the dependency is replaced with an object called database with the method, Calculator query, that returns an array. The developer does not need to verify how many times the method has been called.\nWhich two test approaches describe the requirement?\nChoose 2 answers",
    "options": [
      "A. Black box",
      "B. White box",
      "C. Substitution",
      "D. Stubbing"
    ],
    "answer": "B,C",
    "title": "Question 78",
    "explanation": ""
  },
  {
    "content": "At Universal Containers, every team has its own way of copying JavaScript objects. The code Snippet shows an implementation from one team:\nFunction Person() {\nthis.firstName = \"John\";\nthis.lastName = 'Doe';\nThis.name =() => (\nconsole.log('Hello $(this.firstName) $(this.firstName)');\n)}\nConst john = new Person ();\nConst dan = JSON.parse(JSON.stringify(john));\ndan.firstName ='Dan';\ndan.name();\nWhat is the Output of the code execution?",
    "options": [
      "A. TypeError: Assignment to constant variable.",
      "B. Hello Dan Doe",
      "C. TypeError: dan.name is not a function",
      "D. Hello John DOe"
    ],
    "answer": "C",
    "title": "Question 79",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nfunction foo () {\nconst a =2;\nfunction bat() {\nconsole.log(a);\n}\nreturn bar;\n}\nWhy does the function bar have access to variable a ?",
    "options": [
      "A. Prototype chain",
      "B. Hoisting",
      "C. Inner function's scope",
      "D. Outer function's scope"
    ],
    "answer": "D",
    "title": "Question 80",
    "explanation": ""
  },
  {
    "content": "GIven a value, which three options can a developer use to detect if the value is NaN?\nChoose 3 answers !",
    "options": [
      "A. value === Number.NaN",
      "B. Number.isNaN(value)",
      "C. value == NaN",
      "D. value ! == value",
      "E. Object.is(value, NaN)"
    ],
    "answer": "B,C",
    "title": "Question 81",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet obj ={\nFoo: 1,\nBar: 2\n}\nLet output =[],\nfor(let something in obj{\noutput.push(something);\n}\nconsole.log(output);\nWhat is the output line 11?",
    "options": [
      "A. [\"bar\",\"foo\"]",
      "B. [\"foo:1\",\"bar:2\"]",
      "C. [\"foo\",\"bar\"]",
      "D. [1,2]"
    ],
    "answer": "C",
    "title": "Question 82",
    "explanation": ""
  },
  {
    "content": "developer is trying to convince management that their team will benefit from using Node.js for a backend server that they are going to create. The server will be a web server that handles API requests from a website that the team has already built using HTML, CSS, and JavaScript.\nWhich three benefits of Node.js can the developer use to persuade their manager?\nChoose 3 answers:",
    "options": [
      "A. Performs a static analysis on code before execution to look for runtime errors.",
      "B. User non blocking functionality for performant request handling .",
      "C. I nstalls with its own package manager to install and manage third-party libraries.",
      "D. Ensures stability with one major release every few years.",
      "E. Executes server-side JavaScript code to avoid learning a new language."
    ],
    "answer": "A,B,C",
    "title": "Question 83",
    "explanation": ""
  },
  {
    "content": "R74\nnew Promise((resolve, reject) => {\nconst fraction = Math.random();\nif( fraction >0.5) reject(\"fraction > 0.5, \" + fraction);\nresolve(fraction);\n})\n.then(() =>console.log(\"resolved\"))\n.catch((error) => console.error(error))\n.finally(() => console.log(\" when am I called?\"));\nWhen does Promise.finally on line 08 get called?",
    "options": [
      "A. When rejected",
      "B. When resolved and settled",
      "C. WHen resolved",
      "D. When resolved or rejected"
    ],
    "answer": "D",
    "title": "Question 84",
    "explanation": ""
  },
  {
    "content": "A developer writes the code below to calculate the factorial of a given number function sum(number){ return number * sum(number-1);\n}\nsum(3);\nwhat is the result of executing the code.",
    "options": ["A. 0", "B. Error", "C. 6", "D. -Infinity"],
    "answer": "B",
    "title": "Question 85",
    "explanation": ""
  }
]
