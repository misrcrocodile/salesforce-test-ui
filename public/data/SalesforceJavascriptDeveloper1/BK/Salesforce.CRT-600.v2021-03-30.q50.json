[
  {
    "content": "Cloud Kicks has a class to represent items for sale in an online store, as shown below:\nClass Item{\nconstructor (name, price){\nthis.name = name;\nthis.price = price;\n}\nformattedPrice(){\nreturn 's' + String(this.price);}}\nA new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes.\nWhich line of code properly declares the clothingItem class such that it inherits from Item?",
    "options": [
      "A. Class ClothingItem super Item {",
      "B. Class ClothingItem implements Item{",
      "C. Class ClothingItem {",
      "D. Class ClothingItem extends Item {"
    ],
    "answer": "D",
    "title": "Question 1",
    "explanation": ""
  },
  {
    "content": "Universal Containers recently launched its new landing page to host a crowd-funding campaign. The page uses an external library to display some third-party ads. Once the page is fully loaded, it creates more than 50 new HTML items placed randomly inside the DOM, like the one in the code below:\nAll the elements includes the same ad-library-item class, They are hidden by default, and they are randomly displayed while the user navigates through the page.",
    "options": [
      "A. Use the browser to execute a script that removes all the element containing the class ad-library-item.",
      "B. Use the browser console to execute a script that prevents the load event to be fired.",
      "C. Use the DOM inspector to remove all the elements containing the class ad-library-item.",
      "D. Use the DOM inspector to prevent the load event to be fired."
    ],
    "answer": "A",
    "title": "Question 2",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet inArray =[ [ 1, 2 ] , [ 3, 4, 5 ] ];\nWhich two statements result in the array [1, 2, 3, 4, 5] ?\nChoose 2 answers",
    "options": [
      "A. [ ]. Concat.apply ([ ], inArray);",
      "B. [ ]. concat ( [ ....inArray ] );",
      "C. [ ]. concat.apply(inArray, [ ]);",
      "D. [ ]. Concat (... inArray);"
    ],
    "answer": "A,D",
    "title": "Question 3",
    "explanation": ""
  },
  {
    "content": "Given the following code:\ndocument.body.addEventListener(' click ', (event) => {\nif (/* CODE REPLACEMENT HERE */) {\nconsole.log('button clicked!');\n)\n});\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",
    "options": [
      "A. button.addEventListener('click')",
      "B. Event.clicked",
      "C. event.target.nodeName == 'BUTTON'",
      "D. e.nodeTarget ==this"
    ],
    "answer": "C",
    "title": "Question 4",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button> The developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done to make this code work as expected?",
    "options": [
      "A. Replace line 04 with console.log(input .value);",
      "B. Replace line 03 with const input = document.getElementByName('input');",
      "C. Replace line 02 with button.addCallback(\"click\", function() {",
      "D. Replace line 02 with button.addEventListener(\"onclick\", function() {"
    ],
    "answer": "A",
    "title": "Question 5",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 let car1 = new promise((_, reject) =>\n02 setTimeout(reject, 2000, \"Car 1 crashed in\"));\n03 let car2 = new Promise(resolve => setTimeout(resolve, 1500, \"Car 2\ncompleted\"));\n04 let car3 = new Promise(resolve => setTimeout (resolve, 3000, \"Car 3\nCompleted\"));\n05 Promise.race([car1, car2, car3])\n06 .then(value => (\n07 let result = $(value) the race. `;\n08 ))\n09 .catch( arr => (\n10 console.log(\"Race is cancelled.\", err);\n11 ));\nWhat is the value of result when Promise.race executes?",
    "options": [
      "A. Car 3 completed the race.",
      "B. Race is cancelled.",
      "C. Car 2 completed the race.",
      "D. Car 1 crashed in the race."
    ],
    "answer": "C",
    "title": "Question 6",
    "explanation": ""
  },
  {
    "content": "A developer needs to test this function:\n01 const sum3 = (arr) => (\n02 if (!arr.length) return 0,\n03 if (arr.length === 1) return arr[0],\n04 if (arr.length === 2) return arr[0] + arr[1],\n05 return arr[0] + arr[1] + arr[2],\n06 );\nWhich two assert statements are valid tests for the function?\nChoose 2 answers",
    "options": [
      "A. console.assert(sum3(1, '2')) == 12);",
      "B. console.assert(sum3(-3, 2 )) == -1);",
      "C. console.assert(sum3('hello', 2, 3, 4)) === NaN);",
      "D. console.assert(sum3(0)) == 0);"
    ],
    "answer": "A,B",
    "title": "Question 7",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconsole.log(''start);\nPromise.resolve('Success') .then(function(value){\nconsole.log('Success');\n});\nconsole.log('End');\nWhat is the output after the code executes successfully?",
    "options": [
      "A. Success\n         Start\n         End",
      "B. Start\n         End\n         Success",
      "C. End\n         Start\n         Success",
      "D. Start\n         Success\n         End"
    ],
    "answer": "B",
    "title": "Question 8",
    "explanation": ""
  },
  {
    "content": "Universal Containers (UC) notices that its application that allows users to search for accounts makes a network request each time a key is pressed. This results in too many requests for the server to handle.\n* Address this problem, UC decides to implement a debounce function on string change handler.\nWhat are three key steps to implement this debounce function?\nChoose 3 answers:",
    "options": [
      "A. Store the timeId of the setTimeout last enqueued by the search string change handle.",
      "B. If there is an existing setTimeout and the search string change, allow the existing setTimeout to finish, and do not enqueue a new setTimeout.",
      "C. If there is an existing setTimeout and the search string changes, cancel the existing setTimeout using the persisted timerId and replace it with a new setTimeout.",
      "D. Ensure that the network request has the property debounce set to true.",
      "E. When the search string changes, enqueue the request within a setTimeout."
    ],
    "answer": "B,D,E",
    "title": "Question 9",
    "explanation": ""
  },
  {
    "content": "Refer to HTML below:\n<p> The current status of an Order: <span id =\"status\"> In Progress </span> </p>.\nWhich JavaScript statement changes the text 'In Progress' to 'Completed' ?",
    "options": [
      "A. document.getElementById(\"status\").innerHTML = 'Completed' ;",
      "B. document.getElementById(\".status\").innerHTML = 'Completed' ;",
      "C. document.getElementById(\"#status\").innerHTML = 'Completed' ;",
      "D. document.getElementById(\"status\").Value = 'Completed' ;"
    ],
    "answer": "A",
    "title": "Question 10",
    "explanation": ""
  },
  {
    "content": "Refer to the following object:\nconst cat ={\nfirstName: 'Fancy',\nlastName: ' Whiskers',\nGet fullName() {\nreturn this.firstName + ' ' + this.lastName;\n}\n};\nHow can a developer access the fullName property for cat?",
    "options": [
      "A. cat.function.fullName()",
      "B. cat.fullName",
      "C. cat.fullName()",
      "D. cat.get.fullName"
    ],
    "answer": "B",
    "title": "Question 11",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst searchTest = 'Yay! Salesforce is amazing!\" ;\nLet result1 = searchText.search(/sales/i);\nLet result 21 = searchText.search(/sales/i);\nconsole.log(result1);\nconsole.log(result2);\nAfter running this code, which result is displayed on the console?",
    "options": [
      "A. > 5 >undefined",
      "B. > true > false",
      "C. > 5 > -1",
      "D. > 5 > 0"
    ],
    "answer": "A",
    "title": "Question 12",
    "explanation": ""
  },
  {
    "content": "Which option is true about the strict mode in imported modules?",
    "options": [
      "A. Imported modules are in strict mode whether you declare them as such or not.",
      "B. Add the statement use strict =false; before any other statements in the module to enable not- strict mode.",
      "C. Add the statement use non-strict, before any other statements in the module to enable not-strict mode.",
      "D. You can only reference notStrict() functions from the imported module."
    ],
    "answer": "D",
    "title": "Question 13",
    "explanation": ""
  },
  {
    "content": "Which option is true about the strict mode in imported modules?",
    "options": [
      "A. Add the statement use strict =false; before any other statements in the module to enable not- strict mode.",
      "B. Imported modules are in strict mode whether you declare them as such or not.",
      "C. Add the statement use non-strict, before any other statements in the module to enable not-strict mode.",
      "D. You can only reference notStrict() functions from the imported module."
    ],
    "answer": "D",
    "title": "Question 14",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nFunction muFunction(reassign){\nLet x = 1;\nvar y = 1;\nif( reassign ) {\nLet x= 2;\nVar y = 2;\nconsole.log(x);\nconsole.log(y);}\nconsole.log(x);\nconsole.log(y);}\nWhat is displayed when myFunction(true) is called?",
    "options": [
      "A. 2 2 1 2",
      "B. 2 2 2 2",
      "C. 2 2 undefined undefined",
      "D. 2 2 1 1"
    ],
    "answer": "A",
    "title": "Question 15",
    "explanation": ""
  },
  {
    "content": "Which two console logs outputs NaN ?\nChoose 2 answers",
    "options": [
      "A. console.log(10/ Number('5'));",
      "B. console.log(parseInt('two'));",
      "C. console.log(10/0);",
      "D. console.log(10/ ''five);"
    ],
    "answer": "B,D",
    "title": "Question 16",
    "explanation": ""
  },
  {
    "content": "Refer to the following array:\nLet arr1 = [ 1, 2, 3, 4, 5 ];\nWhich two lines of code result in a second array, arr2 being created such that arr2 is not a reference to arr1?",
    "options": [
      "A. Let arr2 = arr1;",
      "B. Let arr2 = arr1.sort();",
      "C. Let arr2 = Array.from(arr1);",
      "D. Let arr2 = arr1.slice(0, 5);"
    ],
    "answer": "C,D",
    "title": "Question 17",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet o = {\nget js() {\nlet city1 = String(\"st. Louis\");\nlet city2 = String(\" New York\");\nreturn {\nfirstCity: city1.toLowerCase(),\nsecondCity: city2.toLowerCase(),\n}\n}\n}\nWhat value can a developer expect when referencing o.js.secondCity?",
    "options": [
      "A. ' New York '",
      "B. Undefined",
      "C. An error",
      "D. ' new york '"
    ],
    "answer": "D",
    "title": "Question 18",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst myFunction = arr => {\nReturn arr.reduce((result, current) =>{\nReturn result = current;\n}, 10};\n}\nWhat is the output of this function when called with an empty array ?",
    "options": [
      "A. Returns 10",
      "B. Throws an error",
      "C. Returns NaN",
      "D. Returns 0"
    ],
    "answer": "A",
    "title": "Question 19",
    "explanation": ""
  },
  {
    "content": "At Universal Containers, every team has its own way of copying JavaScript objects. The code Snippet shows an implementation from one team:\nFunction Person() {\nthis.firstName = \"John\";\nthis.lastName = 'Doe';\nThis.name =() => (\nconsole.log('Hello $(this.firstName) $(this.firstName)');\n)}\nConst john = new Person ();\nConst dan = JSON.parse(JSON.stringify(john));\ndan.firstName ='Dan';\ndan.name();\nWhat is the Output of the code execution?",
    "options": [
      "A. TypeError: dan.name is not a function",
      "B. Hello John DOe",
      "C. Hello Dan Doe",
      "D. TypeError: Assignment to constant variable."
    ],
    "answer": "A",
    "title": "Question 20",
    "explanation": ""
  },
  {
    "content": "developer is trying to convince management that their team will benefit from using Node.js for a backend server that they are going to create. The server will be a web server that handles API requests from a website that the team has already built using HTML, CSS, and JavaScript.\nWhich three benefits of Node.js can the developer use to persuade their manager?\nChoose 3 answers:",
    "options": [
      "A. Executes server-side JavaScript code to avoid learning a new language.",
      "B. User non blocking functionality for performant request handling .",
      "C. Performs a static analysis on code before execution to look for runtime errors.",
      "D. Ensures stability with one major release every few years.",
      "E. I nstalls with its own package manager to install and manage third-party libraries."
    ],
    "answer": "B,C,E",
    "title": "Question 21",
    "explanation": ""
  },
  {
    "content": "Which code statement correctly retrieves and returns an object from localStorage?",
    "options": [
      "A. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage[storageKey];\n         }",
      "B. const retrieveFromLocalStorage = (storageKey) =>{\n         return window.localStorage.getItem(storageKey);\n         }",
      "C. const retrieveFromLocalStorage = () =>{\n         return JSON.stringify(window.localStorage.getItem(storageKey));\n         }",
      "D. const retrieveFromLocalStorage = (storageKey) =>{\n         return JSON.parse(window.localStorage.getItem(storageKey));\n         }"
    ],
    "answer": "D",
    "title": "Question 22",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 const server = require('server');\n02 /* Insert code here */\nA developer imports a library that creates a web server. The imported library uses events and callbacks to start the servers Which code should be inserted at the line 03 to set up an event and start the web server ?",
    "options": [
      "A. server()",
      "B. console.log( 'Listening on ', port) ;",
      "C. serve(( port) => (",
      "D. Server.start ();",
      "E. server.on(' connect ' , ( port) => {\n         console.log('Listening on ' , port) ;})"
    ],
    "answer": "E",
    "title": "Question 23",
    "explanation": ""
  },
  {
    "content": "A developer has code that calculates a restaurant bill, but generates incorrect answers while testing the code:\nfunction calculateBill ( items ) {\nlet total = 0;\ntotal += findSubTotal(items);\ntotal += addTax(total);\ntotal += addTip(total);\nreturn total;\n}\nWhich option allows the developer to step into each function execution within calculateBill?",
    "options": [
      "A. Using the debugger command on line 03",
      "B. Calling the console.trace (total) method on line 03.",
      "C. Using the debugger command on line 05.",
      "D. Wrapping findSubtotal in a console.log() method."
    ],
    "answer": "C",
    "title": "Question 24",
    "explanation": ""
  },
  {
    "content": "Which three statements are true about promises ?\nChoose 3 answers",
    "options": [
      "A. A fulfilled or rejected promise will not change states .",
      "B. A pending promise can become fulfilled, settled, or rejected.",
      "C. A settled promise can become resolved.",
      "D. A Promise has a .then() method.",
      "E. The executor of a new Promise runs automatically."
    ],
    "answer": "A,B,D",
    "title": "Question 25",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\n<html lang=\"en\">\n<body>\n<div onclick = \"console.log('Outer message') ;\">\n<button id =\"myButton\">CLick me<button>\n</div>\n</body>\n<script>\nfunction displayMessage(ev) {\nev.stopPropagation();\nconsole.log('Inner message.');\n}\nconst elem = document.getElementById('myButton');\nelem.addEventListener('click' , displayMessage);\n</script>\n</html>\nWhat will the console show when the button is clicked?",
    "options": [
      "A. Outer message\n         Inner message",
      "B. Inner message",
      "C. Outer message",
      "D. Inner message\n         Outer message"
    ],
    "answer": "B",
    "title": "Question 26",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button>\nThe developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done make this code work as expected?",
    "options": [
      "A. Replace line 02 with button.addEventListener(\"onclick\", function() {",
      "B. Replace line 03 with const input = document.getElementByName('input');",
      "C. Replace line 04 with console.log(input .value);",
      "D. Replace line 02 with button.addCallback(\"click\", function() {"
    ],
    "answer": "C",
    "title": "Question 27",
    "explanation": ""
  },
  {
    "content": "What is the result of the code block?",
    "options": [
      "A. The console logs 'flag' and another flag.",
      "B. An error is thrown.",
      "C. The console logs only 'flag'.",
      "D. The console logs 'flag' and then an error is thrown."
    ],
    "answer": "D",
    "title": "Question 28",
    "explanation": ""
  },
  {
    "content": "Given the requirement to refactor the code above to JavaScript class format, which class definition is correct?",
    "options": ["A. B", "B. D", "C. C", "D. A"],
    "answer": "D",
    "title": "Question 29",
    "explanation": ""
  },
  {
    "content": "Considering type coercion, what does the following expression evaluate to?\nTrue + '13' + NaN",
    "options": ["A. 14", "B. ' true13 '", "C. ' 113Nan '", "D. ' true13NaN '"],
    "answer": "D",
    "title": "Question 30",
    "explanation": ""
  },
  {
    "content": "Given code below:\nsetTimeout (() => (\nconsole.log(1);\n). 0);\nconsole.log(2);\nNew Promise ((resolve, reject )) = > (\nsetTimeout(() => (\nreject(console.log(3));\n). 1000);\n)).catch(() => (\nconsole.log(4);\n));\nconsole.log(5);\nWhat is logged to the console?",
    "options": ["A. 2 1 4 3 5", "B. 1 2 5 3 4", "C. 1 2 4 3 5", "D. 2 5 1 3 4"],
    "answer": "D",
    "title": "Question 31",
    "explanation": ""
  },
  {
    "content": "Why would a developer specify a package.jason as a developed forge instead of a dependency ?",
    "options": [
      "A. It is only needed for local development and testing.",
      "B. It is required by the application in production.",
      "C. Other required packages depend on it for development.",
      "D. It should be bundled when the package is published."
    ],
    "answer": "A",
    "title": "Question 32",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet foodMenu1 = ['pizza', 'burger', 'French fries'];\nLet finalMenu = foodMenu1;\nfinalMenu.push('Garlic bread');\nWhat is the value of foodMenu1 after the code executes?",
    "options": [
      "A. [ 'pizza','Burger', 'French fires', 'Garlic bread']",
      "B. [ 'pizza','Burger', 'French fires']",
      "C. [ 'Garlic bread']",
      "D. [ 'Garlic bread' , 'pizza','Burger', 'French fires' ]"
    ],
    "answer": "B",
    "title": "Question 33",
    "explanation": ""
  },
  {
    "content": "Refer to following code:\nclass Vehicle {\nconstructor(plate) {\nThis.plate =plate;\n}\n}\nClass Truck extends Vehicle {\nconstructor(plate, weight) {\n//Missing code\nThis.weight = weight;\n}\ndisplayWeight() {\nconsole.log('The truck ${this.plate} has a weight of ${this.weight} lb.');}} Let myTruck = new Truck('123AB', 5000); myTruck.displayWeight(); Which statement should be added to line 09 for the code to display 'The truck 123AB has a weight of 5000lb.'?",
    "options": [
      "A. super(plate);",
      "B. Vehicle.plate = plate;",
      "C. Super.plate =plate;",
      "D. This.plate =plate;"
    ],
    "answer": "A",
    "title": "Question 34",
    "explanation": ""
  },
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Error", "B. Message", "C. Log", "D. Info", "E. Assert"],
    "answer": "D,E",
    "title": "Question 35",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet obj ={\nFoo: 1,\nBar: 2\n}\nLet output =[],\nfor(let something in obj{\noutput.push(something);\n}\nconsole.log(output);\nWhat is the output line 11?",
    "options": [
      "A. [\"foo\",\"bar\"]",
      "B. [\"bar\",\"foo\"]",
      "C. [\"foo:1\",\"bar:2\"]",
      "D. [1,2]"
    ],
    "answer": "A",
    "title": "Question 36",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet textValue = '1984';\nWhich code assignment shows a correct way to convert this string to an integer?",
    "options": [
      "A. Let numberValue = textValue.toInteger();",
      "B. Let numberValue = Integer(textValue);",
      "C. Let numberValue = (Number)textValue;",
      "D. let numberValue = Number(textValue);"
    ],
    "answer": "D",
    "title": "Question 37",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet sayHello = () => {\nconsole.log ('Hello, world!');\n};\nWhich code executes sayHello once, two minutes from now?",
    "options": [
      "A. setTimeout(sayHello(), 12000);",
      "B. setInterval(sayHello, 12000);",
      "C. setTimeout(sayHello, 12000);",
      "D. delay(sayHello, 12000);"
    ],
    "answer": "C",
    "title": "Question 38",
    "explanation": ""
  },
  {
    "content": "Refer to the following code that imports a module named utils:\nimport (foo, bar) from '/path/Utils.js';\nfoo() ;\nbar() ;\nWhich two implementations of Utils.js export foo and bar such that the code above runs without error?\nChoose 2 answers",
    "options": [
      "A. const foo = () => { return 'foo';}\n         const bar = () => {return 'bar'; }\n         Export default foo, bar;",
      "B. Export default class {\n         foo() { return 'foo' ; }\n         bar() { return 'bar' ; }\n         }",
      "C. const foo = () => { return 'foo' ; }\n         const bar = () => { return 'bar' ; }\n         export { bar, foo }",
      "D. // FooUtils.js and BarUtils.js exist\n         Import (foo) from '/path/FooUtils.js';\n         Import (boo) from ' /path/NarUtils.js';"
    ],
    "answer": "B,C",
    "title": "Question 39",
    "explanation": ""
  },
  {
    "content": "Given the code below:\n01 function GameConsole (name) {\n02 this.name = name;\n03 }\n04\n05 GameConsole.prototype.load = function(gamename) {\n06 console.log( ` $(this.name) is loading a game : $(gamename) ...`);\n07 )\n08 function Console 16 Bit (name) {\n09 GameConsole.call(this, name) ;\n10 }\n11 Console16bit.prototype = Object.create ( GameConsole.prototype) ;\n12 //insert code here\n13 console.log( ` $(this.name) is loading a cartridge game : $(gamename) ...`);\n14 }\n15 const console16bit = new Console16bit(' SNEGeneziz ');\n16 console16bit.load(' Super Nonic 3x Force ');\nWhat should a developer insert at line 15 to output the following message using the method ?\n> SNEGeneziz is loading a cartridge game: Super Monic 3x Force . . .",
    "options": [
      "A. Console16bit = Object.create(GameConsole.prototype).load = function\n         (gamename) {",
      "B. Console16bit.prototype.load = function(gamename) {",
      "C. Console16bit.prototype.load(gamename) = function() {",
      "D. Console16bit.prototype.load(gamename) {"
    ],
    "answer": "B",
    "title": "Question 40",
    "explanation": ""
  },
  {
    "content": "A developer wrote a fizzbuzz function that when passed in a number, returns the following:\n* 'Fizz' if the number is divisible by 3.\n* 'Buzz' if the number is divisible by 5.\n* 'Fizzbuzz' if the number is divisible by both 3 and 5.\n* Empty string if the number is divisible by neither 3 or 5.\nWhich two test cases will properly test scenarios for the fizzbuzz function?\nChoose 2 answers",
    "options": [
      "A. let res = fizzbuzz(Infinity);\n         console.assert ( res === ' ' )",
      "B. let res = fizzbuzz(5);\n         console.assert ( res === ' ' );",
      "C. let res = fizzbuzz(15);\n         console.assert ( res === ' fizzbuzz ' )",
      "D. let res = fizzbuzz(3);\n         console.assert ( res === ' buzz ' )"
    ],
    "answer": "A,C,D",
    "title": "Question 41",
    "explanation": ""
  },
  {
    "content": "Consider type coercion, what does the following expression evaluate to?\nTrue + 3 + '100' + null",
    "options": ["A. '4100null'", "B. 104", "C. 4100", "D. '3100null'"],
    "answer": "A",
    "title": "Question 42",
    "explanation": ""
  },
  {
    "content": "Refer to the code below?\nLet searchString = ' look for this ';\nWhich two options remove the whitespace from the beginning of searchString?\nChoose 2 answers",
    "options": [
      "A. trimStart(searchString);",
      "B. searchString.replace(/*\\s\\s*/, '');",
      "C. searchString.trimEnd();",
      "D. searchString.trimStart();"
    ],
    "answer": "B,D",
    "title": "Question 43",
    "explanation": ""
  },
  {
    "content": "Which option is a core Node,js module?",
    "options": ["A. Memory", "B. Ios", "C. locate", "D. Path"],
    "answer": "D",
    "title": "Question 44",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst pi = 3.1415326,\nWhat is the data type of pi?",
    "options": ["A. Decimal", "B. Double", "C. Float", "D. Number"],
    "answer": "D",
    "title": "Question 45",
    "explanation": ""
  },
  {
    "content": "developer removes the HTML class attribute from the checkout button, so now it is simply:\n<button>Checkout</button>.\nThere is a test to verify the existence of the checkout button, however it looks for a button with class= \"blue\". The test fails because no such button is found.\nWhich type of test category describes this test?",
    "options": [
      "A. True positive",
      "B. False negative",
      "C. False positive",
      "D. True negative"
    ],
    "answer": "B",
    "title": "Question 46",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nLet x =null;\nconsole.log(typeof x);\nWhat is the output of the line 02?",
    "options": ["A. \"Object\"", "B. \"undefined\"", "C. \"Null\"", "D. \"X\""],
    "answer": "A",
    "title": "Question 47",
    "explanation": ""
  },
  {
    "content": "Which three options show valid methods for creating a fat arrow function?\nChoose 3 answers",
    "options": [
      "A. X,y,z => ( console.log(' executed ') ;)",
      "B. (x,y,z) => ( console.log(' executed ') ;)",
      "C. [ ] => ( console.log(' executed ') ;)",
      "D. x => ( console.log(' executed ') ; )",
      "E. ( ) => ( console.log(' executed ') ;)"
    ],
    "answer": "B,D",
    "title": "Question 48",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet sampleText = 'The quick brown fox jumps';\nA developer needs to determine if a certain substring is part of a string.\nWhich three expressions return true for the given substring ?\nChoose 3 answers",
    "options": [
      "A. sampleText.includes(' Fox ', 3)",
      "B. sampleText.includes(' quick ', 4);",
      "C. sampleText.includes('fox');",
      "D. sampleText.includes(' fox ');",
      "E. sampleText.includes(' quick ') !== -1;"
    ],
    "answer": "B,D,E",
    "title": "Question 49",
    "explanation": ""
  },
  {
    "content": "A test has a dependency on database.query. During the test the dependency is replaced with an object called database with the method, query, that returns an array. The developer needs to verify how many times the method was called and the arguments used each time.\nWhich two test approaches describe the requirement?\nChoose 2 answers",
    "options": ["A. White box", "B. Mocking", "C. Black box", "D. Integration"],
    "answer": "A,B",
    "title": "Question 50",
    "explanation": ""
  }
]
