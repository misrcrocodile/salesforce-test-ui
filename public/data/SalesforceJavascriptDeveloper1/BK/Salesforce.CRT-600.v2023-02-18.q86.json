[
  {
    "content": "A developer has the function, shown below, that is called when a page loads.\nWhere can the developer see the log statement after loading the page in the browser?",
    "options": [
      "A. On the webpage console log",
      "B. On the browser JavaScript console",
      "C. In the browser performance tools log",
      "D. On the terminal console running the web server"
    ],
    "answer": "B",
    "title": "Question 1",
    "explanation": ""
  },
  {
    "content": "Universal Containers (UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions any that might cause this problem. To verify this, the developer decides to execute everything and log the time each of these three suspicious functions consumes.\nWhich function can the developer use to obtain the time spent by every one of the three functions?",
    "options": [
      "A. console.getTime ()",
      "B. console.trace()",
      "C. console. timeLog ()",
      "D. console.timeStamp ()"
    ],
    "answer": "C",
    "title": "Question 2",
    "explanation": ""
  },
  {
    "content": "Teams at Universal Containers (UC) work on multiple JavaScript projects at the same time.\nUC is thinking about reusability and how each team can benefit from the work of others.\nGoing open-source or public is not an option at this time.\nWhich option is available to UC with npm?",
    "options": [
      "A. Private registries are not supported by npm, but packages can be installed via URL.",
      "B. Private registries are not supported by npm, but packages can be installed via git.",
      "C. Private packages are not supported, but they can use another package manager like yarn.",
      "D. Private packages can be scored, and scopes can be associated to a private registries."
    ],
    "answer": "D",
    "title": "Question 3",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nlet car1 = new Promise((_ ,reject)=> setTimeout(reject,2000,\"Car1 crashed in\")); let car2 = new Promise(resolve => setTimeout(resolve,1500,\"Car2 completed\")); let car3 = new Promise(resolve => setTimeout(resolve,3000,\"Car3 completed\")); Promise.race([car1,car2,car3])\n.then(value=>{\nlet result = `${value} the race.`;\n}).catch(err=>{\nconsole.log('Race is cancelled.',err);\n});\nWhat is the value of result when promise.race execues?",
    "options": ["A. Car2 completed the race."],
    "answer": "A",
    "title": "Question 4",
    "explanation": ""
  },
  {
    "content": "Which three browser specific APIs are available for developers to persist data between page loads ?\nChoose 3 answers",
    "options": [
      "A. localStorage.",
      "B. IIFEs",
      "C. Cookies",
      "D. Global variables",
      "E. indexedDB"
    ],
    "answer": "A,B,E",
    "title": "Question 5",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button> The developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done to make this code work as expected?",
    "options": [
      "A. Replace line 02 with button.addEventListener(\"onclick\", function() {",
      "B. Replace line 03 with const input = document.getElementByName('input');",
      "C. Replace line 02 with button.addCallback(\"click\", function() {",
      "D. Replace line 04 with console.log(input .value);"
    ],
    "answer": "D",
    "title": "Question 6",
    "explanation": ""
  },
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Info", "B. Assert", "C. Log", "D. Message", "E. Error"],
    "answer": "A,C,E",
    "title": "Question 7",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nFunction changeValue(obj) {\nObj.value = obj.value/2;\n}\nConst objA = (value: 10);\nConst objB = objA;\nchangeValue(objB);\nConst result = objA.value;\nWhat is the value of result after the code executes?",
    "options": ["A. Undefined", "B. 10", "C. 5", "D. Nan"],
    "answer": "C",
    "title": "Question 8",
    "explanation": ""
  },
  {
    "content": "Given the code below:\n01 function GameConsole (name) {\n02 this.name = name;\n03 }\n04\n05 GameConsole.prototype.load = function(gamename) {\n06 console.log( ` $(this.name) is loading a game : $(gamename) ...`);\n07 )\n08 function Console 16 Bit (name) {\n09 GameConsole.call(this, name) ;\n10 }\n11 Console16bit.prototype = Object.create ( GameConsole.prototype) ;\n12 //insert code here\n13 console.log( ` $(this.name) is loading a cartridge game : $(gamename) ...`);\n14 }\n15 const console16bit = new Console16bit(' SNEGeneziz ');\n16 console16bit.load(' Super Nonic 3x Force ');\nWhat should a developer insert at line 15 to output the following message using the method ?\n> SNEGeneziz is loading a cartridge game: Super Monic 3x Force . . .",
    "options": [
      "A. Console16bit.prototype.load = function(gamename) {",
      "B. Console16bit.prototype.load(gamename) = function() {",
      "C. Console16bit.prototype.load(gamename) {",
      "D. Console16bit = Object.create(GameConsole.prototype).load = function\n         (gamename) {"
    ],
    "answer": "A",
    "title": "Question 9",
    "explanation": ""
  },
  {
    "content": "Given the requirement to refactor the code above to JavaScript class format, which class definition is correct?\nA)\nB)\nC)\nD)",
    "options": ["A. Option C", "B. Option D", "C. Option B", "D. Option A"],
    "answer": "D",
    "title": "Question 10",
    "explanation": ""
  },
  {
    "content": "Refer to the HTML below:\n<div id=\"main\">\n<ul>\n<li>Leo</li>\n<li>Tony</li>\n<li>Tiger</li>\n</ul>\n</div>\nWhich JavaScript statement results in changing \" Tony\" to \"Mr. T.\"?",
    "options": [
      "A. document.querySelector('$main li:second-child').innerHTML = ' Mr. T. ';",
      "B. document.querySelector('$main li.Tony').innerHTML = ' Mr. T. ';",
      "C. document.querySelector('$main li:nth-child(2)'),innerHTML = ' Mr. T. ';",
      "D. document.querySelectorAll('$main $TONY').innerHTML = ' Mr. T. ';"
    ],
    "answer": "C",
    "title": "Question 11",
    "explanation": ""
  },
  {
    "content": "A class was written to represent items for purchase in an online store, and a second class Representing items that are on sale at a discounted price. THe constructor sets the name to the first value passed in. The pseudocode is below:\nClass Item {\nconstructor(name, price) {\n... // Constructor Implementation\n}\n}\nClass SaleItem extends Item {\nconstructor (name, price, discount) {\n...//Constructor Implementation\n}\n}\nThere is a new requirement for a developer to implement a description method that will return a brief description for Item and SaleItem.\nLet regItem =new Item('Scarf', 55);\nLet saleItem = new SaleItem('Shirt' 80, -1);\nItem.prototype.description = function () { return 'This is a ' + this.name; console.log(regItem.description()); console.log(saleItem.description()); SaleItem.prototype.description = function () { return 'This is a discounted ' + this.name; } console.log(regItem.description()); console.log(saleItem.description()); What is the output when executing the code above ?",
    "options": [
      "A. This is a Scarf\n         This is a Shirt\n         This is a discounted Scarf\n         This is a discounted Shirt",
      "B. This is a Scarf\n         Uncaught TypeError: saleItem.description is not a function\n         This is aScarf\n         This is a discounted Shirt",
      "C. This is a Scarf\n         This is a Shirt\n         This is a Scarf\n         This is a discounted Shirt",
      "D. This is aScarf\n         Uncaught TypeError: saleItem.description is not a function\n         This is a Shirt\n         This is a did counted Shirt"
    ],
    "answer": "C",
    "title": "Question 12",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nWhich three code segments result in a correct conversion from number to string? Choose 3 answers",
    "options": [
      "A. let scrValue = String(numValue);",
      "B. let strValue = numValue.toText ();",
      "C. let strValue = * * 4 numValue;",
      "D. let strValue = numValue. toString();",
      "E. let strValue = (String)numValue;"
    ],
    "answer": "A,C,D",
    "title": "Question 13",
    "explanation": ""
  },
  {
    "content": "Refer to the following code block:\nWhat is the console output?",
    "options": [
      "A. > Better student Jackie got 70% on test.",
      "B. > Uncaught Reference Error",
      "C. > Better student Jackie got 100% on test.",
      "D. > Jackie got 70% on test."
    ],
    "answer": "C",
    "title": "Question 14",
    "explanation": ""
  },
  {
    "content": "Refer the following code\nwhat is the value of array after code executes?",
    "options": ["A. [ 1, 2, 3, 4 ]", "B. [ 1, 2, 3, 5 ]"],
    "answer": "B",
    "title": "Question 15",
    "explanation": ""
  },
  {
    "content": "Given the following code:\ndocument.body.addEventListener(' click ', (event) => {\nif (/* CODE REPLACEMENT HERE */) {\nconsole.log('button clicked!');\n)\n});\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",
    "options": [
      "A. e.nodeTarget ==this",
      "B. button.addEventListener('click')",
      "C. Event.clicked",
      "D. event.target.nodeName == 'BUTTON'"
    ],
    "answer": "D",
    "title": "Question 16",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 const exec = (item, delay) =>{\n02 new Promise(resolve => setTimeout( () => resolve(item), delay)),\n03 async function runParallel() {\n04 Const (result1, result2, result3) = await Promise.all{\n05 [exec ('x', '100') , exec('y', 500), exec('z', '100')]\n06 );07 return `parallel is done: $(result1) $(result2)$(result3)`;\n08 }}}\nWhich two statements correctly execute the runParallel () function?\nChoose 2 answers",
    "options": [
      "A. Async runParallel () .then(data);",
      "B. runParallel () .then(function(data)\n         return data",
      "C. runParallel ( ). done(function(data){\n         return data;});",
      "D. runParallel () .then(data);"
    ],
    "answer": "B,C",
    "title": "Question 17",
    "explanation": ""
  },
  {
    "content": "Refer to the code below\nlet inArray = [[1,2],[3,4,5]];\nwhich two statements results in the array [1,2,3,4,5]?\nchoose 2 answer",
    "options": [
      "A. [ ].concat([...inArray])",
      "B. [ ].concat(...inArray);",
      "C. [ ].concat.apply([ ],inArray);",
      "D. [ ].concat.apply(inArray,[ ]);"
    ],
    "answer": "B,C",
    "title": "Question 18",
    "explanation": ""
  },
  {
    "content": "GIven a value, which three options can a developer use to detect if the value is NaN?\nChoose 3 answers !",
    "options": [
      "A. value ! == value",
      "B. value === Number.NaN",
      "C. Number.isNaN(value)",
      "D. value == NaN",
      "E. Object.is(value, NaN)"
    ],
    "answer": "C,D",
    "title": "Question 19",
    "explanation": ""
  },
  {
    "content": "After user acceptance testing, the developer is asked to change the webpage background based on user's location. This change was implemented and deployed for testing.\nThe tester reports that the background is not changing, however it works as required when viewing on the developer's computer.\nWhich two actions will help determine accurate results?\nChoose 2 answers",
    "options": [
      "A. The tester should disable their browser cache.",
      "B. The developer should rework the code.",
      "C. The tester should dear their browser cache.",
      "D. The developer should inspect their browser refresh settings."
    ],
    "answer": "C,D",
    "title": "Question 20",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nWhat will be the first four numbers logged?",
    "options": ["A. 0112", "B. 0012", "C. 0122", "D. 0123"],
    "answer": "A",
    "title": "Question 21",
    "explanation": ""
  },
  {
    "content": "A developer creates a class that represents a blog post based on the requirement that a Post should have a body author and view count.\nThe Code shown Below:\nClass Post {\n// Insert code here\nThis.body =body\nThis.author = author;\nthis.viewCount = viewCount;\n}\n}\nWhich statement should be inserted in the placeholder on line 02 to allow for a variable to be set to a new instanceof a Post with the three attributes correctly populated?",
    "options": [
      "A. constructor() {",
      "B. constructor (body, author, viewCount) {",
      "C. Function Post (body, author, viewCount) {",
      "D. super (body, author, viewCount) {"
    ],
    "answer": "B",
    "title": "Question 22",
    "explanation": ""
  },
  {
    "content": "developer creates a new web server that uses Node.js. It imports a server library that uses events and callbacks for handling server functionality.\nThe server library is imported with require and is made available to the code by a variable named server. The developer wants to log any issues that the server has while booting up.\nGiven the code and the information the developer has, which code logs an error at boost with an event?",
    "options": [
      "A. Server.catch ((server) => {\n         console.log('ERROR', error);\n         });",
      "B. Server.error ((server) => {\n         console.log('ERROR', error);\n         });",
      "C. Server.on ('error', (error) => {\n         console.log('ERROR', error);\n         });",
      "D. Try{\n         server.start();\n         } catch(error) {"
    ],
    "answer": "C",
    "title": "Question 23",
    "explanation": "console.log('ERROR', error);\n }"
  },
  {
    "content": "Universal Containers recently launched its new landing page to host a crowd-funding campaign. The page uses an external library to display some third-party ads. Once the page is fully loaded, it creates more than 50 new HTML items placed randomly inside the DOM, like the one in the code below:\nAll the elements includes the same ad-library-item class, They are hidden by default, and they are randomly displayed while the user navigates through the page.",
    "options": [
      "A. Use the browser console to execute a script that prevents the load event to be fired.",
      "B. Use the browser to execute a script that removes all the element containing the class ad-library-item.",
      "C. Use the DOM inspector to prevent the load event to be fired.",
      "D. Use the DOM inspector to remove all the elements containing the class ad-library-item."
    ],
    "answer": "D",
    "title": "Question 24",
    "explanation": ""
  },
  {
    "content": "Which function should a developer use to repeatedly execute code at a fixed interval ?",
    "options": [
      "A. setPeriod",
      "B. setTimeout",
      "C. setInteria",
      "D. setIntervel"
    ],
    "answer": "D",
    "title": "Question 25",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nWhat is the output of line 11?",
    "options": [
      "A. [\"bar\", \"foo\"]",
      "B. [\"foo\", \"bar\"]",
      "C. [1,2]",
      "D. [\"foo:1\", \"bar:2\"]"
    ],
    "answer": "B",
    "title": "Question 26",
    "explanation": ""
  },
  {
    "content": "Which three statements are true about promises ?\nChoose 3 answers",
    "options": [
      "A. The executor of a new Promise runs automatically.",
      "B. A settled promise can become resolved.",
      "C. A fulfilled or rejected promise will not change states .",
      "D. A pending promise can become fulfilled, settled, or rejected.",
      "E. A Promise has a .then() method."
    ],
    "answer": "C,D,E",
    "title": "Question 27",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nis the output of line 02?",
    "options": [
      "A. ''x''",
      "B. ''object''",
      "C. ''undefined''",
      "D. ''null'''"
    ],
    "answer": "B",
    "title": "Question 28",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\n01 let car1 = new promise((_, reject) =>\n02 setTimeout(reject, 2000, \"Car 1 crashed in\"));\n03 let car2 = new Promise(resolve => setTimeout(resolve, 1500, \"Car 2\ncompleted\"));\n04 let car3 = new Promise(resolve => setTimeout (resolve, 3000, \"Car 3\nCompleted\"));\n05 Promise.race([car1, car2, car3])\n06 .then(value => (\n07 let result = $(value) the race. `;\n08 ))\n09 .catch( arr => (\n10 console.log(\"Race is cancelled.\", err);\n11 ));\nWhat is the value of result when Promise.race executes?",
    "options": [
      "A. Race is cancelled.",
      "B. Car 3 completed the race.",
      "C. Car 2 completed the race.",
      "D. Car 1 crashed in the race."
    ],
    "answer": "C",
    "title": "Question 29",
    "explanation": ""
  },
  {
    "content": "A developer has the following array of student test grades:\nLet arr = [ 7, 8, 5, 8, 9 ];\nThe Teacher wants to double each score and then see an array of the students who scored more than 15 points.\nHow should the developer implement the request?",
    "options": [
      "A. Let arr1 = arr.map((num) => ( num *2)).filterBy((val) => ( val >15 ));",
      "B. Let arr1 = arr.map((num) => num*2). Filter (( val) => val > 15);",
      "C. Let arr1 = arr.mapBy (( num) => ( return num *2 )) .filterBy (( val ) => return val > 15 )) ;",
      "D. Let arr1 = arr.filter(( val) => ( return val > 15 )) .map (( num) => ( return num *2 ))"
    ],
    "answer": "B",
    "title": "Question 30",
    "explanation": ""
  },
  {
    "content": "A developer has two ways to write a function:\nOption A:\nfunction Monster() {\nThis.growl = () => {\nConsole.log (\"Grr!\");\n}\n}\nOption B:\nfunction Monster() {};\nMonster.prototype.growl =() => {\nconsole.log(\"Grr!\");\n}\nAfter deciding on an option, the developer creates 1000 monster objects.\nHow many growl methods are created with Option A Option B?",
    "options": [
      "A. 1 growl method is created for Option A. 1000 growl methods are created for Option B.",
      "B. 1000 growl methods are created regardless of which option is used.",
      "C. 1000 growl method is created for Option A. 1 growl methods are created for Option B.",
      "D. 1 growl method is created regardless of which option is used."
    ],
    "answer": "C",
    "title": "Question 31",
    "explanation": ""
  },
  {
    "content": "Which two console logs outputs NaN ?\nChoose 2 answers",
    "options": [
      "A. console.log(10/ ''five);",
      "B. console.log(parseInt('two'));",
      "C. console.log(10/0);",
      "D. console.log(10/ Number('5'));"
    ],
    "answer": "A,B",
    "title": "Question 32",
    "explanation": ""
  },
  {
    "content": "myArraym can have one level, two levels, or more levels.\nWhich statement flattens myArray when it can be arbitrarily nested?",
    "options": [
      "A. myArray. join (\",\"). split (\",\");",
      "B. myArray.flat(Infinity);",
      "C. [ ] .concat {. . .myArray) ;",
      "D. myArray. reduce ((prev, curr) => prev.concat(curr) [ ]);"
    ],
    "answer": "D",
    "title": "Question 33",
    "explanation": ""
  },
  {
    "content": "At Universal Containers, every team has its own way of copying JavaScript objects. The code Snippet shows an implementation from one team:\nFunction Person() {\nthis.firstName = \"John\";\nthis.lastName = 'Doe';\nThis.name =() => (\nconsole.log('Hello $(this.firstName) $(this.firstName)');\n)}\nConst john = new Person ();\nConst dan = JSON.parse(JSON.stringify(john));\ndan.firstName ='Dan';\ndan.name();\nWhat is the Output of the code execution?",
    "options": [
      "A. TypeError: dan.name is not a function",
      "B. TypeError: Assignment to constant variable.",
      "C. Hello John DOe",
      "D. Hello Dan Doe"
    ],
    "answer": "A",
    "title": "Question 34",
    "explanation": ""
  },
  {
    "content": "A developer wants to create an object from a function in the browser using the code below.\nWhat happens due to the lack of the mm keyword on line 02?",
    "options": [
      "A. window.m Is assigned the correct object.",
      "B. The m variable is assigned the correct object.",
      "C. window.name is assigned to 'hello' and the variable = remains undefined.",
      "D. The m variable is assigned the correct object but this.name remains undefined."
    ],
    "answer": "C",
    "title": "Question 35",
    "explanation": ""
  },
  {
    "content": "Refer to the code snippet:\nFunction getAvailabilityMessage(item) {\nIf (getAvailability(item)){\nVar msg =\"Username available\";\n}\nReturn msg;\n}\nA developer writes this code to return a message to user attempting to register a new username. If the username is available, variable.\nWhat is the return value of msg hen getAvailabilityMessage (\"newUserName\" ) is executed and getAvailability(\"newUserName\") returns false?",
    "options": [
      "A. undefined",
      "B. \"Username available\"",
      "C. \"Msg is not defined\"",
      "D. \"newUserName\""
    ],
    "answer": "A",
    "title": "Question 36",
    "explanation": ""
  },
  {
    "content": "In the browser, the window object is often used to assign variables that require the broadest scope in an application Node.js application does not have access to the window object by default.\nWhich two methods are used to address this ?\nChoose 2 answers",
    "options": [
      "A. Create a new window object in the root file.",
      "B. Assign variables to the global object.",
      "C. Assign variables to module.exports and require them as needed.",
      "D. Use the document object instead of the window object."
    ],
    "answer": "B",
    "title": "Question 37",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst resolveAfterMilliseconds = (ms) => Promise.resolve (\nsetTimeout (( => console.log(ms), ms ));\nConst aPromise = await resolveAfterMilliseconds(500);\nConst bPromise = await resolveAfterMilliseconds(500);\nAwait aPromise, wait bPromise;\nWhat is the result of running line 05?",
    "options": [
      "A. aPromise and bPromise run in parallel.",
      "B. Neither aPromise or bPromise runs.",
      "C. aPromise and bPromise run sequentially.",
      "D. Only aPromise runs."
    ],
    "answer": "B",
    "title": "Question 38",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:",
    "options": [
      "A. document.querySelectorAll('$main $TONY').innerHTML = '\" The Lion",
      "B. document.querySelector('$main li:second-child').innerHTML = \" The Lion ';",
      "C. document.querySelector('$main li:nth-child(2)'),innerHTML = \" The Lion. ';",
      "D. document.querySelector('$main li.Tony').innerHTML = '\" The Lion ';"
    ],
    "answer": "A",
    "title": "Question 39",
    "explanation": ""
  },
  {
    "content": "Which two options are core Node.js modules?\nChoose 2 answers",
    "options": ["A. worker", "B. exception", "C. http", "D. isotream"],
    "answer": "C,D",
    "title": "Question 40",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nWhich method can be used to provide a visual representation of the list of users and to allow sorting by the name or email attribute?",
    "options": [
      "A. console.groupCol lapsed (usersList) ;",
      "B. console.group(usersList) ;",
      "C. console.table(usersList) ;",
      "D. console.info(usersList) ;"
    ],
    "answer": "B",
    "title": "Question 41",
    "explanation": ""
  },
  {
    "content": "Which statement parses successfully?",
    "options": [
      "A. JSON.parse (\"foo\"); ",
      "B. JSON.parse (\"foo\");",
      "C. JSON. parse (\"\"foo\"');",
      "D. JSON.parse (\"\"foo'\");"
    ],
    "answer": "C",
    "title": "Question 42",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nfunction Person() {\nthis.firstName = 'John';\n}\nPerson.prototype ={\nJob: x => 'Developer'\n};\nconst myFather = new Person();\nconst result =myFather.firstName + ' ' + myFather.job();\nWhat is the value of the result after line 10 executes?",
    "options": [
      "A. John Developer",
      "B. Undefined Developer",
      "C. Error: myFather.job is not a function",
      "D. John undefined"
    ],
    "answer": "A",
    "title": "Question 43",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconsole.log(''start);\nPromise.resolve('Success') .then(function(value){\nconsole.log('Success');\n});\nconsole.log('End');\nWhat is the output after the code executes successfully?",
    "options": [
      "A. Start\n         Success\n         End",
      "B. Start\n         End\n         Success",
      "C. Success\n         Start\n         End",
      "D. End\n         Start\n         Success"
    ],
    "answer": "B",
    "title": "Question 44",
    "explanation": ""
  },
  {
    "content": "Why would a developer specify a package.jason as a developed forge instead of a dependency ?",
    "options": [
      "A. It is required by the application in production.",
      "B. It should be bundled when the package is published.",
      "C. Other required packages depend on it for development.",
      "D. It is only needed for local development and testing."
    ],
    "answer": "D",
    "title": "Question 45",
    "explanation": ""
  },
  {
    "content": "Universal Containers (UC) notices that its application that allows users to search for accounts makes a network request each time a key is pressed. This results in too many requests for the server to handle.\n* Address this problem, UC decides to implement a debounce function on string change handler.\nWhat are three key steps to implement this debounce function?\nChoose 3 answers:",
    "options": [
      "A. When the search string changes, enqueue the request within a setTimeout.",
      "B. Ensure that the network request has the property debounce set to true.",
      "C. Store the timeId of the setTimeout last enqueued by the search string change handle.",
      "D. If there is an existing setTimeout and the search string change, allow the existing setTimeout to finish, and do not enqueue a new setTimeout.",
      "E. If there is an existing setTimeout and the search string changes, cancel the existing setTimeout using the persisted timerId and replace it with a new setTimeout."
    ],
    "answer": "A,B,D",
    "title": "Question 46",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nnew Promise((resolve, reject) => {\nconst fraction = Math.random();\nif( fraction >0.5) reject(\"fraction > 0.5, \" + fraction);\nresolve(fraction);\n})\n.then(() =>console.log(\"resolved\"))\n.catch((error) => console.error(error))\n.finally(() => console.log(\" when am I called?\"));\nWhen does Promise.finally on line 08 get called?",
    "options": [
      "A. When rejected",
      "B. When resolved",
      "C. When resolved and settled",
      "D. When resolved or rejected"
    ],
    "answer": "D",
    "title": "Question 47",
    "explanation": ""
  },
  {
    "content": "A developer is leading the creation of a new browser application that will serve a single page application. The team wants to use a new web framework Minimalsit.js. The Lead developer wants to advocate for a more seasoned web framework that already has a community around it.\nWhich two frameworks should the lead developer advocate for?\nChoose 2 answers",
    "options": ["A. Vue", "B. Angular", "C. Express", "D. Koa"],
    "answer": "B,C",
    "title": "Question 48",
    "explanation": ""
  },
  {
    "content": "Which option is a core Node,js module?",
    "options": ["A. Path", "B. Ios", "C. Memory", "D. locate"],
    "answer": "A",
    "title": "Question 49",
    "explanation": ""
  },
  {
    "content": "Given the following code:\nCounter = 0;\nconst logCounter = () => {\nconsole.log(counter);\n);\nlogCounter();\nsetTimeout(logCOunter, 1100);\nsetInterval(() => {\nCounter++\nlogCounter();\n}, 1000);\nWhat is logged by the first four log statements?",
    "options": ["A. 0 1 2 3", "B. 0 1 2 2", "C. 0 0 1 2", "D. 0 1 1 2"],
    "answer": "D",
    "title": "Question 50",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nWhich statement should be added to line 09 for the code to display 'The boat has a capacity of 10 people?",
    "options": [
      "A. super (size);",
      "B. ship.size size;",
      "C. this.size = size;",
      "D. super.size = size;"
    ],
    "answer": "C",
    "title": "Question 51",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nconst copy = JSON.stringify([ new String(' false '), new Bollean( false ), undefined ]); What is the value of copy?",
    "options": [
      "A. -- [ \\\"false\\\" , { } ]--",
      "B. -- [ \\\"false\\\" ,false, null ]--",
      "C. -- [ false, { } ]--",
      "D. -- [ \\\"false\\\" , false, undefined ]--"
    ],
    "answer": "B",
    "title": "Question 52",
    "explanation": ""
  },
  {
    "content": "Which three options show valid methods for creating a fat arrow function?\nChoose 3 answers",
    "options": [
      "A. x => ( console.log(' executed ') ; )",
      "B. ( ) => ( console.log(' executed ') ;)",
      "C. [ ] => ( console.log(' executed ') ;)",
      "D. X,y,z => ( console.log(' executed ') ;)",
      "E. (x,y,z) => ( console.log(' executed ') ;)"
    ],
    "answer": "A,E",
    "title": "Question 53",
    "explanation": ""
  },
  {
    "content": "bar, awesome is a popular JavaScript module. the versions publish to npm are:\nTeams at Universal Containers use this module in a number of projects. A particular project has the package, json definition below.\nA developer runs this command: npm install.\nWhich version of bar .awesome is installed?",
    "options": [
      "A. 1.4.0",
      "B. 1.3.5",
      "C. 1.3.1",
      "D. The command fails, because version 130 is not found"
    ],
    "answer": "B",
    "title": "Question 54",
    "explanation": ""
  },
  {
    "content": "Refer to the following array:\nLet arr = [ 1,2, 3, 4, 5];\nWhich three options result in x evaluating as [3, 4, 5] ?\nChoose 3 answers.",
    "options": [
      "A. Let x= arr.splice(2,3);",
      "B. Let x= arr.filter((a) => ( return a>2 ));",
      "C. Let x= arr.slice(2);",
      "D. Let x = arr.slice(2,3);",
      "E. Let x= arr.filter (( a) => (a<2));"
    ],
    "answer": "A,B,C",
    "title": "Question 55",
    "explanation": ""
  },
  {
    "content": "A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.\nHere is the HTML file content:\n<input type =\" text\" value=\"Hello\" name =\"input\">\n<button type =\"button\" >Display </button>\nThe developer wrote the javascript code below:\nConst button = document.querySelector('button');\nbutton.addEvenListener('click', () => (\nConst input = document.querySelector('input');\nconsole.log(input.getAttribute('value'));\nWhen the user clicks the button, the output is always \"Hello\".\nWhat needs to be done make this code work as expected?",
    "options": [
      "A. Replace line 04 with console.log(input .value);",
      "B. Replace line 02 with button.addEventListener(\"onclick\", function() {",
      "C. Replace line 03 with const input = document.getElementByName('input');",
      "D. Replace line 02 with button.addCallback(\"click\", function() {"
    ],
    "answer": "A",
    "title": "Question 56",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet inArray =[ [ 1, 2 ] , [ 3, 4, 5 ] ];\nWhich two statements result in the array [1, 2, 3, 4, 5] ?\nChoose 2 answers",
    "options": [
      "A. [ ]. concat ( [ ....inArray ] );",
      "B. [ ]. concat.apply(inArray, [ ]);",
      "C. [ ]. Concat.apply ([ ], inArray);",
      "D. [ ]. Concat (... inArray);"
    ],
    "answer": "C,D",
    "title": "Question 57",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nFunction Person(firstName, lastName, eyecolor) {\nthis.firstName =firstName;\nthis.lastName = lastName;\nthis.eyeColor = eyeColor;\n}\nPerson.job = 'Developer';\nconst myFather = new Person('John', 'Doe');\nconsole.log(myFather.job);\nWhat is the output after the code executes?",
    "options": [
      "A. Developer",
      "B. Undefined",
      "C. ReferenceError: eyeColor is not defined",
      "D. ReferenceError: assignment to undeclared variable \"Person\""
    ],
    "answer": "B",
    "title": "Question 58",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nfunction changeValue(param) {\nParam =5;\n}\nLet a =10;\nLet b =5;\nchangeValue(b);\nConst result = a+ \" - \"+ b;\nWhat is the value of result when code executes?",
    "options": ["A. 5 - 10", "B. 10 - 5", "C. 5 -5", "D. 10 -10"],
    "answer": "D",
    "title": "Question 59",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconst car = {\nprice:100,\ngetPrice:function(){\nreturn this.price;\n}\n};\nconst customCar = Object.create(car);\ncustomCar.price = 70;\ndelete customCar.price;const result = customCar.getPrice();\nWhat is the value of result after the code executes?",
    "options": ["A. null", "B. 70", "C. undefined", "D. 100"],
    "answer": "D",
    "title": "Question 60",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhat is the value of result after line 10 executes?",
    "options": [
      "A. John undefined",
      "B. John Developer",
      "C. undefined Developer",
      "D. Error: myFather.job is not a function"
    ],
    "answer": "B",
    "title": "Question 61",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nfunction test (val) {\nIf (val === undefined) {\nreturn 'Undefined values!' ;\n}\nif (val === null) {\nreturn 'Null value! ';\n}\nreturn val;\n}\nLet x;\ntest(x);\nWhat is returned by the function call on line 13?",
    "options": [
      "A. 'Undefined values!'",
      "B. Line 13 throws an error.",
      "C. Undefined",
      "D. 'Null value!'"
    ],
    "answer": "A",
    "title": "Question 62",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconst event = new CustomEvent(\n//Missing Code\n);\nobj.dispatchEvent(event);\nA developer needs to dispatch a custom event called update to send information about recordId.\nWhich two options could a developer insert at the placeholder in line 02 to achieve this?\nChoose 2 answers",
    "options": [
      "A. 'Update' , (\n         recordId : '123abc'\n         (",
      "B. 'Update' , '123abc'",
      "C. { type : 'update', recordId : '123abc' }",
      "D. 'Update' , {\n         Details : {\n         recordId : '123abc'"
    ],
    "answer": "A,D",
    "title": "Question 63",
    "explanation": "}\n }"
  },
  {
    "content": "Refer to the following object.\nHow can a developer access the fullName property for dog?",
    "options": [
      "A. Dog, get, fullName",
      "B. Dog, function, fullName",
      "C. Dog.fullName",
      "D. Dog.fullName ( )"
    ],
    "answer": "C",
    "title": "Question 64",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nConst objBook = {\nTitle: 'Javascript',\n};\nObject.preventExtensions(objBook);\nConst newObjBook = objBook;\nnewObjectBook.author = 'Robert';\nWhat are the values of objBook and newObjBook respectively ?",
    "options": [
      "A. [title: \"javaScript\"] [title: \"javaScript\"]",
      "B. {author: \"Robert\"}\n         {author: \"Robert\", title: \"javaScript}",
      "C. {author: \"Robert\", title: \"javaScript}\n         Undefined",
      "D. {author: \"Robert\", title: \"javaScript}\n         {author: \"Robert\", title: \"javaScript}"
    ],
    "answer": "A",
    "title": "Question 65",
    "explanation": ""
  },
  {
    "content": "Refer to the following code that performs a basic mathematical operation on a provided input:\nfunction calculate(num) {\nReturn (num +10) / 3;\n}\nHow should line 02 be written to ensure that x evaluates to 6 in the line below?\nLet x = calculate (8);",
    "options": [
      "A. Return Integer(num +10) /3;",
      "B. Return (Number (num +10 ) / 3;",
      "C. Return Number((num +10) /3 );",
      "D. Return Number(num + 10) / 3;"
    ],
    "answer": "B",
    "title": "Question 66",
    "explanation": ""
  },
  {
    "content": "A developer is asked to fix some bugs reported by users. To do that, the developer adds a breakpoint for debugging.\nFunction Car (maxSpeed, color){\nThis.maxspeed =masSpeed;\nThis.color = color;\nLet carSpeed = document.getElementById(' CarSpeed');\nDebugger;\nLet fourWheels =new Car (carSpeed.value, 'red');\nWhen the code execution stops at the breakpoint on line 06, which two types of information are available in the browser console ?\nChoose 2 answers:",
    "options": [
      "A. The information stored in the window.localStorage property",
      "B. A variable displaying the number of instances created for the Car Object.",
      "C. The values of the carSpeed and fourWheels variables",
      "D. The style, event listeners and other attributes applied to the carSpeed DOM element"
    ],
    "answer": "A,D",
    "title": "Question 67",
    "explanation": ""
  },
  {
    "content": "Cloud Kicks has a class to represent items for sale in an online store, as shown below:\nClass Item{\nconstructor (name, price){\nthis.name = name;\nthis.price = price;\n}\nformattedPrice(){\nreturn 's' + String(this.price);}}\nA new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes.\nWhich line of code properly declares the clothingItem class such that it inherits from Item?",
    "options": [
      "A. Class ClothingItem {",
      "B. Class ClothingItem implements Item{",
      "C. Class ClothingItem super Item {",
      "D. Class ClothingItem extends Item {"
    ],
    "answer": "D",
    "title": "Question 68",
    "explanation": ""
  },
  {
    "content": "Which code statement below correctly persists an objects in local Storage ?",
    "options": [
      "A. const setLocalStorage = (storageKey, jsObject) => {\n         window.localStorage.setItem(storageKey, JSON.stringify(jsObject));\n         }",
      "B. const setLocalStorage = ( jsObject) => {\n         window.localStorage.connectObject(jsObject));\n         }",
      "C. const setLocalStorage = ( jsObject) => {\n         window.localStorage.setItem(jsObject);\n         }",
      "D. const setLocalStorage = (storageKey, jsObject) => {\n         window.localStorage.persist(storageKey, jsObject);\n         }"
    ],
    "answer": "A",
    "title": "Question 69",
    "explanation": ""
  },
  {
    "content": "Refer to HTML below:\n<div id =\"main\">\n<div id = \" card-00\">This card is smaller.</div>\n<div id = \"card-01\">The width and height of this card is determined by its contents.</div>\n</div>\nWhich expression outputs the screen width of the element with the ID card-01?",
    "options": [
      "A. document.getElementById(' card-01 ').width",
      "B. document.getElementById(' card-01 ').getBoundingClientRest().width",
      "C. document.getElementById(' card-01 ').style.width",
      "D. document.getElementById(' card-01 ').innerHTML.lenght*e"
    ],
    "answer": "B",
    "title": "Question 70",
    "explanation": ""
  },
  {
    "content": "Which two console logs output NaN?\nChoose 2 answers | |",
    "options": [
      "A. console.log(10 / 0);",
      "B. console.loeg(10 / 'five');",
      "C. console.log(10 / Number('5) ) ;",
      "D. console.log(parseInt ' (\"two')) ;"
    ],
    "answer": "C,D",
    "title": "Question 71",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLet foodMenu1 = ['pizza', 'burger', 'French fries'];\nLet finalMenu = foodMenu1;\nfinalMenu.push('Garlic bread');\nWhat is the value of foodMenu1 after the code executes?",
    "options": [
      "A. [ 'pizza','Burger', 'French fires']",
      "B. [ 'Garlic bread']",
      "C. [ 'pizza','Burger', 'French fires', 'Garlic bread']",
      "D. [ 'Garlic bread' , 'pizza','Burger', 'French fires' ]"
    ],
    "answer": "A",
    "title": "Question 72",
    "explanation": ""
  },
  {
    "content": "A developer implements and calls the following code when an application state change occurs:\nConst onStateChange =innerPageState) => {\nwindow.history.pushState(newPageState, ' ', null);\n}\nIf the back button is clicked after this method is executed, what can a developer expect?",
    "options": [
      "A. A popstate event is fired with a state property that details the application's last state.",
      "B. A navigate event is fired with a state property that details the previous application state.",
      "C. The page reloads and all Javascript is reinitialized.",
      "D. The page is navigated away from and the previous page in the browser's history is loaded."
    ],
    "answer": "D",
    "title": "Question 73",
    "explanation": ""
  },
  {
    "content": "The developer wants to test the array shown:\nconst arr = Array(5).fill(0)\nWhich two tests are the most accurate for this array ?\nChoose 2 answers:",
    "options": [
      "A. console.assert(arr[0] === 0 && arr[ arr.length] === 0);",
      "B. console.assert( arr.length === 5 );",
      "C. console.assert (arr.length >0);",
      "D. arr.forEach(elem => console.assert(elem === 0)) ;"
    ],
    "answer": "B,D",
    "title": "Question 74",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nFunction muFunction(reassign){\nLet x = 1;\nvar y = 1;\nif( reassign ) {\nLet x= 2;\nVar y = 2;\nconsole.log(x);\nconsole.log(y);}\nconsole.log(x);\nconsole.log(y);}\nWhat is displayed when myFunction(true) is called?",
    "options": [
      "A. 2 2 1 2",
      "B. 2 2 1 1",
      "C. 2 2 2 2",
      "D. 2 2 undefined undefined"
    ],
    "answer": "A",
    "title": "Question 75",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nConst pi = 3.1415326,\nWhat is the data type of pi?",
    "options": ["A. Decimal", "B. Float", "C. Number", "D. Double"],
    "answer": "C",
    "title": "Question 76",
    "explanation": ""
  },
  {
    "content": "A developer needs to test this function:\n01 const sum3 = (arr) => (\n02 if (!arr.length) return 0,\n03 if (arr.length === 1) return arr[0],\n04 if (arr.length === 2) return arr[0] + arr[1],\n05 return arr[0] + arr[1] + arr[2],\n06 );\nWhich two assert statements are valid tests for the function?\nChoose 2 answers",
    "options": [
      "A. console.assert(sum3(0)) == 0);",
      "B. console.assert(sum3('hello', 2, 3, 4)) === NaN);",
      "C. console.assert(sum3(-3, 2 )) == -1);",
      "D. console.assert(sum3(1, '2')) == 12);"
    ],
    "answer": "C,D",
    "title": "Question 77",
    "explanation": ""
  },
  {
    "content": "Refer to HTML below:\n<p> The current status of an Order: <span id =\"status\"> In Progress </span> </p>.\nWhich JavaScript statement changes the text 'In Progress' to 'Completed' ?",
    "options": [
      "A. document.getElementById(\".status\").innerHTML = 'Completed' ;",
      "B. document.getElementById(\"status\").Value = 'Completed' ;",
      "C. document.getElementById(\"status\").innerHTML = 'Completed' ;",
      "D. document.getElementById(\"#status\").innerHTML = 'Completed' ;"
    ],
    "answer": "C",
    "title": "Question 78",
    "explanation": ""
  },
  {
    "content": "A developer wants to use a module called DataPrettyPrint. This module exports one default function called printDate ().\nHow can a developer import and use the printDate() function?\nA)\nB)\nC)\nD)",
    "options": ["A. Option D", "B. Option A", "C. Option B", "D. Option C"],
    "answer": "C",
    "title": "Question 79",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nLet first = 'who';\nLet second = 'what';\nTry{\nTry{\nThrow new error('Sad trombone');\n}catch (err){\nFirst ='Why';\n}finally {\nSecond ='when';\n} catch (err) {\nSecond ='Where';\n}\nWhat are the values for first and second once the code executes ?",
    "options": [
      "A. First is why and second is when",
      "B. First is why and second is where",
      "C. First is Who and second is When",
      "D. First is who and second is where"
    ],
    "answer": "A",
    "title": "Question 80",
    "explanation": ""
  },
  {
    "content": "A developer is creating a simple webpage with a button. When a user clicks this button for the first time, a message is displayed.\nThe developer wrote the JavaScript code below, but something is missing. The message gets displayed every time a user clicks the button, instead of just the first time.\n01 function listen(event) {\n02 alert ( 'Hey! I am John Doe') ;\n03 button.addEventListener ('click', listen);\nWhich two code lines make this code work as required?\nChoose 2 answers",
    "options": [
      "A. On line 04, use event.stopPropagation ( ),",
      "B. On line 02, use event.first to test if it is the first execution.",
      "C. On line 06, add an option called once to button.addEventListener().",
      "D. On line 04, use button.removeEventListener(' click\" , listen);"
    ],
    "answer": "C,D",
    "title": "Question 81",
    "explanation": ""
  },
  {
    "content": "Which javascript methods can be used to serialize an object into a string and deserialize a JSON string into an object, respectively?",
    "options": [
      "A. JSON.serialize and JSON.deserialize",
      "B. JSON.stringify and JSON.parse",
      "C. JSON.encode and JSON.decode",
      "D. JSON.parse and JSON.deserialize"
    ],
    "answer": "B",
    "title": "Question 82",
    "explanation": ""
  },
  {
    "content": "Which statement accurately describes an aspect of promises?",
    "options": [
      "A. .then() manipulates and returns the original promise.",
      "B. In a.then() function, returning results is not necessary since callbacks will catch the result of a previous promise.",
      "C. .then() cannot be added after a catch.",
      "D. Arguments for the callback function passed to .then() are optional."
    ],
    "answer": "D",
    "title": "Question 83",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet sampleText = 'The quick brown fox jumps';\nA developer needs to determine if a certain substring is part of a string.\nWhich three expressions return true for the given substring ?\nChoose 3 answers",
    "options": [
      "A. sampleText.includes(' quick ', 4);",
      "B. sampleText.includes('fox');",
      "C. sampleText.includes(' quick ') !== -1;",
      "D. sampleText.includes(' fox ');",
      "E. sampleText.includes(' Fox ', 3)"
    ],
    "answer": "A,C,D",
    "title": "Question 84",
    "explanation": ""
  },
  {
    "content": "developer uses the code below to format a date.\nAfter executing, what is the value of formattedDate?",
    "options": [
      "A. May 10, 2020",
      "B. June 10, 2020",
      "C. October 05, 2020",
      "D. November 05, 2020"
    ],
    "answer": "B",
    "title": "Question 85",
    "explanation": ""
  },
  {
    "content": "Given the code below:\nWhat is logged to the console'",
    "options": ["A. 2 5 1 3 4", "B. 1 2 3 4 5", "C. 2 5 3 4 1", "D. 1 2 5 3 4"],
    "answer": "C",
    "title": "Question 86",
    "explanation": ""
  }
]
