[
  {
    "content": "Refer to following code block:\nLet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,];\nLet output =0;\nFor (let num of array){\nif (output >0){\nBreak;\n}\nif(num % 2 == 0){\nContinue;\n}\nOutput +=num;\nWhat is the value of output after the code executes?",
    "options": ["A. 16", "B. 11", "C. 25", "D. 36"],
    "answer": "A",
    "title": "Question 1",
    "explanation": ""
  },
  {
    "content": "A developer receives a comment from the Tech Lead that the code given below has error:\nconst monthName = 'July';\nconst year = 2019;\nif(year === 2019) {\nmonthName = 'June';\n}\nWhich line edit should be made to make this code run?",
    "options": [
      "A. 02 let year =2019;",
      "B. 02 const year = 2020;",
      "C. 01 let monthName ='July';",
      "D. 03 if (year == 2019) {"
    ],
    "answer": "C",
    "title": "Question 2",
    "explanation": ""
  },
  {
    "content": "developer removes the HTML class attribute from the checkout button, so now it is simply:\n<button>Checkout</button>.\nThere is a test to verify the existence of the checkout button, however it looks for a button with class= \"blue\". The test fails because no such button is found.\nWhich type of test category describes this test?",
    "options": [
      "A. True positive",
      "B. False positive",
      "C. False negative",
      "D. True negative"
    ],
    "answer": "C",
    "title": "Question 3",
    "explanation": ""
  },
  {
    "content": "A developer is setting up a new Node.js server with a client library that is built using events and callbacks.\nThe library:\n* Will establish a web socket connection and handle receipt of messages to the server\n* Will be imported with require, and made available with a variable called we.\nThe developer also wants to add error logging if a connection fails.\nGiven this info, which code segment shows the correct way to set up a client with two events that listen at execution time?",
    "options": [
      "A. ws.on ('connect', ( ) => {\n         console.log('connected to client'); ws.on('error', (error) => { console.log('ERROR' , error); });\n         });",
      "B. try{\n         ws.connect (( ) => {\n         console.log('connected to client'); });\n         } catch(error) { console.log('ERROR' , error); };\n         }",
      "C. ws.connect (( ) => {\n         console.log('connected to client'); }).catch((error) => { console.log('ERROR' , error); }};",
      "D. ws.on ('connect', ( ) => { console.log('connected to client'); }}; ws.on('error', (error) => { console.log('ERROR' , error); }};"
    ],
    "answer": "D",
    "title": "Question 4",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nfunction Person() {\nthis.firstName = 'John';\n}\nPerson.prototype ={\nJob: x => 'Developer'\n};\nconst myFather = new Person();\nconst result =myFather.firstName + ' ' + myFather.job();\nWhat is the value of the result after line 10 executes?",
    "options": [
      "A. John Developer",
      "B. Undefined Developer",
      "C. Error: myFather.job is not a function",
      "D. John undefined"
    ],
    "answer": "A",
    "title": "Question 5",
    "explanation": ""
  },
  {
    "content": "Refer to the expression below:\nLet x = ('1' + 2) == (6 * 2);\nHow should this expression be modified to ensure that evaluates to false?",
    "options": [
      "A. Let x = ('1' + ' 2') == ( 6 * 2);",
      "B. Let x = ('1' + 2) == ( 6 * 2);",
      "C. Let x = (1 + 2) == ( '6' / 2);",
      "D. Let x = (1 + 2 ) == ( 6 / 2);"
    ],
    "answer": "B",
    "title": "Question 6",
    "explanation": ""
  },
  {
    "content": "A developer creates a class that represents a blog post based on the requirement that a Post should have a body author and view count.\nThe Code shown Below:\nClass Post {\n// Insert code here\nThis.body =body\nThis.author = author;\nthis.viewCount = viewCount;\n}\n}\nWhich statement should be inserted in the placeholder on line 02 to allow for a variable to be set to a new instanceof a Post with the three attributes correctly populated?",
    "options": [
      "A. Function Post (body, author, viewCount) {",
      "B. super (body, author, viewCount) {",
      "C. constructor (body, author, viewCount) {",
      "D. constructor() {"
    ],
    "answer": "C",
    "title": "Question 7",
    "explanation": ""
  },
  {
    "content": "is below:\n<input type=\"file\" onchange=\"previewFile()\">\n<img src=\"\" height=\"200\" alt=\"Image Preview...\"/>\nThe JavaScript portion is:\n01 function previewFile(){\n02 const preview = document.querySelector('img');\n03 const file = document.querySelector('input[type=file]').files[0];\n04 //line 4 code\n05 reader.addEventListener(\"load\", () => {\n06 preview.src = reader.result;\n07 },false);\n08 //line 8 code\n09 }\nIn lines 04 and 08, which code allows the user to select an image from their local computer , and to display the image in the browser?",
    "options": [
      "A. 04 const reader = new FileReader();\n         08 if (file) URL.createObjectURL(file);",
      "B. 04 const reader = new File();\n         08 if (file) reader.readAsDataURL(file);",
      "C. 04 const reader = new FileReader();\n         08 if (file) reader.readAsDataURL(file);",
      "D. 04 const reader = new File();\n         08 if (file) URL.createObjectURL(file);"
    ],
    "answer": "C",
    "title": "Question 8",
    "explanation": ""
  },
  {
    "content": "A developer implements and calls the following code when an application state change occurs:\nConst onStateChange =innerPageState) => {\nwindow.history.pushState(newPageState, ' ', null);\n}\nIf the back button is clicked after this method is executed, what can a developer expect?",
    "options": [
      "A. The page reloads and all Javascript is reinitialized.",
      "B. The page is navigated away from and the previous page in the browser's history is loaded.",
      "C. A navigate event is fired with a state property that details the previous application state.",
      "D. A popstate event is fired with a state property that details the application's last state."
    ],
    "answer": "B",
    "title": "Question 9",
    "explanation": ""
  },
  {
    "content": "Given two expressions var1 and var2. What are two valid ways to return the logical AND of the two expressions and ensure it is data type Boolean ?\nChoose 2 answers:",
    "options": [
      "A. var1 && var2",
      "B. Boolean(var1 && var2)",
      "C. Boolean(var1) && Boolean(var2)",
      "D. var1.toBoolean() && var2toBoolean()"
    ],
    "answer": "B,C",
    "title": "Question 10",
    "explanation": ""
  },
  {
    "content": "Cloud Kicks has a class to represent items for sale in an online store, as shown below:\nClass Item{\nconstructor (name, price){\nthis.name = name;\nthis.price = price;\n}\nformattedPrice(){\nreturn 's' + String(this.price);}}\nA new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes.\nWhich line of code properly declares the clothingItem class such that it inherits from Item?",
    "options": [
      "A. Class ClothingItem {",
      "B. Class ClothingItem extends Item {",
      "C. Class ClothingItem implements Item{",
      "D. Class ClothingItem super Item {"
    ],
    "answer": "B",
    "title": "Question 11",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nLet a ='a';\nLet b;\n// b = a;\nconsole.log(b);\nWhat is displayed when the code executes?",
    "options": [
      "A. Undefined",
      "B. ReferenceError: b is not defined",
      "C. Null",
      "D. A"
    ],
    "answer": "A",
    "title": "Question 12",
    "explanation": ""
  },
  {
    "content": "A developer uses a parsed JSON string to work with user information as in the block below:\n01 const userInformation ={\n02 \" id \" : \"user-01\",\n03 \"email\" : \"[emailÂ protected]\",\n04 \"age\" : 25\nWhich two options access the email attribute in the object?\nChoose 2 answers",
    "options": [
      "A. userInformation(\"email\")",
      "B. userInformation.email",
      "C. userInformation.get(\"email\")",
      "D. userInformation(email)"
    ],
    "answer": "A,B",
    "title": "Question 13",
    "explanation": ""
  },
  {
    "content": "Refer to the following code:\nLet sampleText = 'The quick brown fox jumps';\nA developer needs to determine if a certain substring is part of a string.\nWhich three expressions return true for the given substring ?\nChoose 3 answers",
    "options": [
      "A. sampleText.includes(' fox ');",
      "B. sampleText.includes(' quick ') !== -1;",
      "C. sampleText.includes('fox');",
      "D. sampleText.includes(' Fox ', 3)",
      "E. sampleText.includes(' quick ', 4);"
    ],
    "answer": "A,B,E",
    "title": "Question 14",
    "explanation": ""
  },
  {
    "content": "Which statement accurately describes an aspect of promises?",
    "options": [
      "A. .then() manipulates and returns the original promise.",
      "B. .then() cannot be added after a catch.",
      "C. In a.then() function, returning results is not necessary since callbacks will catch the result of a previous promise.",
      "D. Arguments for the callback function passed to .then() are optional."
    ],
    "answer": "D",
    "title": "Question 15",
    "explanation": ""
  },
  {
    "content": "Refer to the code snippet below:\nLet array = [1, 2, 3, 4, 4, 5, 4, 4];\nFor (let i =0; i < array.length; i++){\nif (array[i] === 4) {\narray.splice(i, 1);\n}\n}\nWhat is the value of the array after the code executes?",
    "options": [
      "A. [1, 2, 3, 4, 5, 4, 4]",
      "B. [1, 2, 3, 4, 5, 4]",
      "C. [1, 2, 3, 5]",
      "D. [1, 2, 3, 4, 4, 5, 4]"
    ],
    "answer": "B",
    "title": "Question 16",
    "explanation": ""
  },
  {
    "content": "A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.\n01 function logStatus(status){\n02 console./*Answer goes here*/{'Item status is: %s', status};\n03 }\nWhich three console logging methods allow the use of string substitution in line 02?",
    "options": ["A. Info", "B. Message", "C. Log", "D. Assert", "E. Error"],
    "answer": "A,D",
    "title": "Question 17",
    "explanation": ""
  },
  {
    "content": "developer creates a new web server that uses Node.js. It imports a server library that uses events and callbacks for handling server functionality.\nThe server library is imported with require and is made available to the code by a variable named server. The developer wants to log any issues that the server has while booting up.\nGiven the code and the information the developer has, which code logs an error at boost with an event?",
    "options": [
      "A. Server.catch ((server) => {\n         console.log('ERROR', error);\n         });",
      "B. Server.error ((server) => {\n         console.log('ERROR', error);\n         });",
      "C. Server.on ('error', (error) => {\n         console.log('ERROR', error);\n         });",
      "D. Try{\n         server.start();\n         } catch(error) {"
    ],
    "answer": "C",
    "title": "Question 18",
    "explanation": "console.log('ERROR', error);\n }"
  },
  {
    "content": "Universal Container(UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions that cause this problem. To verify this, the developer decides to do everything and log the time each of these three suspicious functions consumes.\nconsole.time('Performance');\nmaybeAHeavyFunction();\nthisCouldTakeTooLong();\norMaybeThisOne();\nconsole.endTime('Performance');\nWhich function can the developer use to obtain the time spent by every one of the three functions?",
    "options": [
      "A. console.getTime()",
      "B. console.trace()",
      "C. console.timeStamp()",
      "D. console.timeLog()"
    ],
    "answer": "D",
    "title": "Question 19",
    "explanation": ""
  },
  {
    "content": "In which situation should a developer include a try .. catch block around their function call ?",
    "options": [
      "A. The function has an error that should not be silenced.",
      "B. The function contains scheduled code.",
      "C. The function might raise a runtime error that needs to be handled.",
      "D. The function results in an out of memory issue."
    ],
    "answer": "C",
    "title": "Question 20",
    "explanation": ""
  },
  {
    "content": "A developer has the function, shown below, that is called when a page loads.\nfunction onload() {\nconsole.log(\"Page has loaded!\");\n}\nWhere can the developer see the log statement after loading the page in the browser?",
    "options": [
      "A. Browser performance toots",
      "B. On the webpage.",
      "C. Terminal running the web server.",
      "D. Browser javaScript console"
    ],
    "answer": "D",
    "title": "Question 21",
    "explanation": ""
  },
  {
    "content": "Given the following code:\ndocument.body.addEventListener(' click ', (event) => {\nif (/* CODE REPLACEMENT HERE */) {\nconsole.log('button clicked!');\n)\n});\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",
    "options": [
      "A. Event.clicked",
      "B. event.target.nodeName == 'BUTTON'",
      "C. button.addEventListener('click')",
      "D. e.nodeTarget ==this"
    ],
    "answer": "B",
    "title": "Question 22",
    "explanation": ""
  },
  {
    "content": "Given code below:\nsetTimeout (() => (\nconsole.log(1);\n). 0);\nconsole.log(2);\nNew Promise ((resolve, reject )) = > (\nsetTimeout(() => (\nreject(console.log(3));\n). 1000);\n)).catch(() => (\nconsole.log(4);\n));\nconsole.log(5);\nWhat is logged to the console?",
    "options": ["A. 1 2 4 3 5", "B. 2 5 1 3 4", "C. 1 2 5 3 4", "D. 2 1 4 3 5"],
    "answer": "B",
    "title": "Question 23",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nfunction foo () {\nconst a =2;\nfunction bat() {\nconsole.log(a);\n}\nreturn bar;\n}\nWhy does the function bar have access to variable a ?",
    "options": [
      "A. Inner function's scope",
      "B. Prototype chain",
      "C. Outer function's scope",
      "D. Hoisting"
    ],
    "answer": "C",
    "title": "Question 24",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nLine 05 causes an error.\nWhat are the values of greeting and salutation once code completes?",
    "options": [
      "A. Greeting is Hello and salutation is Hello, Hello.",
      "B. Greeting is Hello and salutation is I say hello.",
      "C. Greeting is Goodbye and salutation is I say Hello.",
      "D. Greeting is Goodbye and salutation is Hello, Hello."
    ],
    "answer": "A",
    "title": "Question 25",
    "explanation": ""
  },
  {
    "content": "Refer to the code below?\nLet searchString = ' look for this ';\nWhich two options remove the whitespace from the beginning of searchString?\nChoose 2 answers",
    "options": [
      "A. trimStart(searchString);",
      "B. searchString.trimStart();",
      "C. searchString.replace(/*\\s\\s*/, '');",
      "D. searchString.trimEnd();"
    ],
    "answer": "B,C",
    "title": "Question 26",
    "explanation": ""
  },
  {
    "content": "Refer to the following array:\nLet arr1 = [ 1, 2, 3, 4, 5 ];\nWhich two lines of code result in a second array, arr2 being created such that arr2 is not a reference to arr1?",
    "options": [
      "A. Let arr2 = arr1;",
      "B. Let arr2 = arr1.slice(0, 5);",
      "C. Let arr2 = Array.from(arr1);",
      "D. Let arr2 = arr1.sort();"
    ],
    "answer": "B,C",
    "title": "Question 27",
    "explanation": ""
  },
  {
    "content": "Which three actions can be using the JavaScript browser console?\nChoose 3 answers:",
    "options": [
      "A. View and change DOM the page.",
      "B. Display a report showing the performance of a page.",
      "C. View and change security cookies.",
      "D. view , change, and debug the JavaScript code of the page.",
      "E. Run code that is not related to page."
    ],
    "answer": "A,D,E",
    "title": "Question 28",
    "explanation": ""
  },
  {
    "content": "Refer to code below:\nFunction muFunction(reassign){\nLet x = 1;\nvar y = 1;\nif( reassign ) {\nLet x= 2;\nVar y = 2;\nconsole.log(x);\nconsole.log(y);}\nconsole.log(x);\nconsole.log(y);}\nWhat is displayed when myFunction(true) is called?",
    "options": [
      "A. 2 2 1 1",
      "B. 2 2 undefined undefined",
      "C. 2 2 1 2",
      "D. 2 2 2 2"
    ],
    "answer": "C",
    "title": "Question 29",
    "explanation": ""
  },
  {
    "content": "Which function should a developer use to repeatedly execute code at a fixed interval ?",
    "options": [
      "A. setInteria",
      "B. setIntervel",
      "C. setPeriod",
      "D. setTimeout"
    ],
    "answer": "B",
    "title": "Question 30",
    "explanation": ""
  },
  {
    "content": "A developer wants to use a module named universalContainersLib and then call functions from it.\nHow should a developer import every function from the module and then call the functions foo and bar?",
    "options": [
      "A. import {foo,bar} from '/path/universalCcontainersLib.js';\n         foo():\n         bar()?",
      "B. import * from '/path/universalContainersLib.js';\n         universalContainersLib. foo ()7\n         universalContainersLib.bar ();",
      "C. import * as lib from '/path/universalContainersLib.js';\n         lib.foo();\n         lib. bar ();",
      "D. import all from '/path/universalContainersLib.js';\n         universalContainersLib.foo();\n         universalContainersLib.bar ();"
    ],
    "answer": "C",
    "title": "Question 31",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconst event = new CustomEvent(\n//Missing Code\n);\nobj.dispatchEvent(event);\nA developer needs to dispatch a custom event called update to send information about recordId.\nWhich two options could a developer insert at the placeholder in line 02 to achieve this?\nChoose 2 answers",
    "options": [
      "A. 'Update' , '123abc'",
      "B. { type : 'update', recordId : '123abc' }",
      "C. 'Update' , (\n         recordId : '123abc'\n         (",
      "D. 'Update' , {\n         Details : {\n         recordId : '123abc'\n         }\n         }"
    ],
    "answer": "C,D",
    "title": "Question 32",
    "explanation": ""
  },
  {
    "content": "Given HTML below:\n<div>\n<div id =\"row-uc\"> Universal Container</div>\n<div id =\"row-aa\">Applied Shipping</div>\n<div id =\"row-bt\"> Burlington Textiles </div>\n</div>\nWhich statement adds the priority = account CSS class to the universal COntainers row ?",
    "options": [
      "A. Document .querySelectorALL('#row-uc').classList.add('priority-account');",
      "B. Document .querySelector('#row-uc').classes.push('priority-account');",
      "C. Document .queryElementById('row-uc').addclass('priority-account');",
      "D. Document .querySelector('#row-uc').classList.add('priority-account');"
    ],
    "answer": "C",
    "title": "Question 33",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nWhat is the value of result when the code executes?",
    "options": ["A. 10-10", "B. 5-5", "C. 5-10", "D. 10-5"],
    "answer": "A",
    "title": "Question 34",
    "explanation": ""
  },
  {
    "content": "Which three options show valid methods for creating a fat arrow function?\nChoose 3 answers",
    "options": [
      "A. X,y,z => ( console.log(' executed ') ;)",
      "B. (x,y,z) => ( console.log(' executed ') ;)",
      "C. [ ] => ( console.log(' executed ') ;)",
      "D. ( ) => ( console.log(' executed ') ;)",
      "E. x => ( console.log(' executed ') ; )"
    ],
    "answer": "B,E",
    "title": "Question 35",
    "explanation": ""
  },
  {
    "content": "developer is trying to convince management that their team will benefit from using Node.js for a backend server that they are going to create. The server will be a web server that handles API requests from a website that the team has already built using HTML, CSS, and JavaScript.\nWhich three benefits of Node.js can the developer use to persuade their manager?\nChoose 3 answers:",
    "options": [
      "A. User non blocking functionality for performant request handling .",
      "B. Executes server-side JavaScript code to avoid learning a new language.",
      "C. Ensures stability with one major release every few years.",
      "D. Performs a static analysis on code before execution to look for runtime errors.",
      "E. I nstalls with its own package manager to install and manage third-party libraries."
    ],
    "answer": "A,D,E",
    "title": "Question 36",
    "explanation": ""
  },
  {
    "content": "A class was written to represent items for purchase in an online store, and a second class Representing items that are on sale at a discounted price. THe constructor sets the name to the first value passed in. The pseudocode is below:\nClass Item {\nconstructor(name, price) {\n... // Constructor Implementation\n}\n}\nClass SaleItem extends Item {\nconstructor (name, price, discount) {\n...//Constructor Implementation\n}\n}\nThere is a new requirement for a developer to implement a description method that will return a brief description for Item and SaleItem.\nLet regItem =new Item('Scarf', 55);\nLet saleItem = new SaleItem('Shirt' 80, -1);\nItem.prototype.description = function () { return 'This is a ' + this.name; console.log(regItem.description()); console.log(saleItem.description()); SaleItem.prototype.description = function () { return 'This is a discounted ' + this.name; } console.log(regItem.description()); console.log(saleItem.description()); What is the output when executing the code above ?",
    "options": [
      "A. This is a Scarf\n         Uncaught TypeError: saleItem.description is not a function\n         This is aScarf\n         This is a discounted Shirt",
      "B. This is aScarf\n         Uncaught TypeError: saleItem.description is not a function\n         This is a Shirt\n         This is a did counted Shirt",
      "C. This is a Scarf\n         This is a Shirt\n         This is a discounted Scarf\n         This is a discounted Shirt",
      "D. This is a Scarf\n         This is a Shirt\n         This is a Scarf\n         This is a discounted Shirt"
    ],
    "answer": "D",
    "title": "Question 37",
    "explanation": ""
  },
  {
    "content": "A developer is asked to fix some bugs reported by users. To do that, the developer adds a breakpoint for debugging.\nFunction Car (maxSpeed, color){\nThis.maxspeed =masSpeed;\nThis.color = color;\nLet carSpeed = document.getElementById(' CarSpeed');\nDebugger;\nLet fourWheels =new Car (carSpeed.value, 'red');\nWhen the code execution stops at the breakpoint on line 06, which two types of information are available in the browser console ?\nChoose 2 answers:",
    "options": [
      "A. The values of the carSpeed and fourWheels variables",
      "B. The style, event listeners and other attributes applied to the carSpeed DOM element",
      "C. The information stored in the window.localStorage property",
      "D. A variable displaying the number of instances created for the Car Object."
    ],
    "answer": "B,C",
    "title": "Question 38",
    "explanation": ""
  },
  {
    "content": "The developer wants to test this code:\nConst toNumber =(strOrNum) => strOrNum;\nWhich two tests are most accurate for this code?\nChoose 2 answers",
    "options": [
      "A. console.assert(toNumber('2') === 2);",
      "B. console.assert(toNumber () === NaN);",
      "C. console.assert(Number.isNaN(toNumber()));",
      "D. console.assert(toNumber('-3') < 0);"
    ],
    "answer": "A,D",
    "title": "Question 39",
    "explanation": ""
  },
  {
    "content": "A developer creates an object where its properties should be immutable and prevent properties from being added or modified.\nWhich method should be used to execute this business requirement ?",
    "options": [
      "A. Object.freeze()",
      "B. Object.lock()",
      "C. Object.const()",
      "D. Object.eval()"
    ],
    "answer": "A",
    "title": "Question 40",
    "explanation": ""
  },
  {
    "content": "Which option is true about the strict mode in imported modules?",
    "options": [
      "A. Imported modules are in strict mode whether you declare them as such or not.",
      "B. Add the statement use non-strict, before any other statements in the module to enable not-strict mode.",
      "C. You can only reference notStrict() functions from the imported module.",
      "D. Add the statement use strict =false; before any other statements in the module to enable not- strict mode."
    ],
    "answer": "C",
    "title": "Question 41",
    "explanation": ""
  },
  {
    "content": "A developer is debugging a web server that uses Node.js The server hits a runtimeerror every third request to an important endpoint on the web server.\nThe developer added a break point to the start script, that is at index.js at he root of the server's source code. The developer wants to make use of chrome DevTools to debug.\nWhich command can be run to access DevTools and make sure the breakdown is hit ?",
    "options": [
      "A. Node --inspect-brk index.js",
      "B. Node inspect index.js",
      "C. Node --inspect index.js",
      "D. node -i index.js"
    ],
    "answer": "C",
    "title": "Question 42",
    "explanation": ""
  },
  {
    "content": "Refer to the code snippet below:\nLet array = [1, 2, 3, 4, 4, 5, 4, 4];\nFor (let i =0; i < array.length; i++)\nif (array[i] === 4) {\narray.splice(i, 1);\n}\n}\nWhat is the value of array after the code executes?",
    "options": [
      "A. [1, 2, 3, 4, 5, 4, 4]",
      "B. [1, 2, 3, 4, 4, 5, 4]",
      "C. [1, 2, 3, 5]",
      "D. [1, 2, 3, 4, 5, 4]"
    ],
    "answer": "B",
    "title": "Question 43",
    "explanation": ""
  },
  {
    "content": "A developer is required to write a function that calculates the sum of elements in an array but is getting undefined every time the code is executed. The developer needs to find what is missing in the code below.\nConst sumFunction = arr => {\nReturn arr.reduce((result, current) => {\n//\nResult += current;\n//\n), 10);\n);\nWhich option makes the code work as expected?",
    "options": [
      "A. Replace line 03 with if(arr.length == 0 ) ( return 0; )",
      "B. Replace line 05 with return result;",
      "C. Replace line 02 with return arr.map(( result, current) => (",
      "D. Replace line 04 with result = result +current;"
    ],
    "answer": "B",
    "title": "Question 44",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nFunction changeValue(obj) {\nObj.value = obj.value/2;\n}\nConst objA = (value: 10);\nConst objB = objA;\nchangeValue(objB);\nConst result = objA.value;\nWhat is the value of result after the code executes?",
    "options": ["A. Nan", "B. 10", "C. 5", "D. Undefined"],
    "answer": "C",
    "title": "Question 45",
    "explanation": ""
  },
  {
    "content": "Given the JavaScript below:\n01 function filterDOM (searchString) {\n02 const parsedSearchString = searchString && searchString.toLowerCase() ;\n03 document.quesrySelectorAll(' .account' ) . forEach(account => (\n04 const accountName = account.innerHTML.toLOwerCase();\n05 account. Style.display = accountName.includes(parsedSearchString) ? /*Insert code*/;\n06 )};\n07 }\nWhich code should replace the placeholder comment on line 05 to hide accounts that do not match the search string?",
    "options": [
      "A. ' visible ' : ' hidden '",
      "B. ' hidden ' : ' visible '",
      "C. ' Block ' : ' none '",
      "D. ' name ' : ' block '"
    ],
    "answer": "C",
    "title": "Question 46",
    "explanation": ""
  },
  {
    "content": "A developer wants to leverage a module to print a price in pretty format, and has imported a method as shown below:\nImport printPrice from '/path/PricePrettyPrint.js';\nBased on the code, what must be true about the printPrice function of the PricePrettyPrint module for this import to work ?",
    "options": [
      "A. printPrice must be the default export",
      "B. printPrice must be a multi exportc",
      "C. printPrice must be be a named export",
      "D. printPrice must be an all export"
    ],
    "answer": "A",
    "title": "Question 47",
    "explanation": ""
  },
  {
    "content": "Refer to the following object:\nconst cat ={\nfirstName: 'Fancy',\nlastName: ' Whiskers',\nGet fullName() {\nreturn this.firstName + ' ' + this.lastName;\n}\n};\nHow can a developer access the fullName property for cat?",
    "options": [
      "A. cat.fullName",
      "B. cat.function.fullName()",
      "C. cat.get.fullName",
      "D. cat.fullName()"
    ],
    "answer": "A",
    "title": "Question 48",
    "explanation": ""
  },
  {
    "content": "Which two console logs outputs NaN ?\nChoose 2 answers",
    "options": [
      "A. console.log(parseInt('two'));",
      "B. console.log(10/0);",
      "C. console.log(10/ ''five);",
      "D. console.log(10/ Number('5'));"
    ],
    "answer": "A,C",
    "title": "Question 49",
    "explanation": ""
  },
  {
    "content": "Given the following code:\ndocument.body.addEventListener(' click ', (event) => {\nif (/* CODE REPLACEMENT HERE */) {\nconsole.log('button clicked!');\n)\n});\nWhich replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",
    "options": [
      "A. button.addEventListener('click')",
      "B. e.nodeTarget ==this",
      "C. event.target.nodeName == 'BUTTON'",
      "D. Event.clicked"
    ],
    "answer": "C",
    "title": "Question 50",
    "explanation": ""
  },
  {
    "content": "Refer to the code below:\nconsole.log(''start);\nPromise.resolve('Success') .then(function(value){\nconsole.log('Success');\n});\nconsole.log('End');\nWhat is the output after the code executes successfully?",
    "options": [
      "A. Start\n         End\n         Success",
      "B. Success\n         Start\n         End",
      "C. Start\n         Success\n         End",
      "D. End\n         Start\n         Success"
    ],
    "answer": "A",
    "title": "Question 51",
    "explanation": ""
  },
  {
    "content": "Why would a developer specify a package.jason as a developed forge instead of a dependency ?",
    "options": [
      "A. It should be bundled when the package is published.",
      "B. It is required by the application in production.",
      "C. It is only needed for local development and testing.",
      "D. Other required packages depend on it for development."
    ],
    "answer": "C",
    "title": "Question 52",
    "explanation": ""
  },
  {
    "content": "Which statement parses successfully?",
    "options": [
      "A. JSON.parse (\"foo\"); ",
      "B. JSON.parse (\"\"foo'\");",
      "C. JSON.parse (\"foo\");",
      "D. JSON. parse (\"\"foo\"');"
    ],
    "answer": "D",
    "title": "Question 53",
    "explanation": ""
  },
  {
    "content": "A developer has an ErrorHandler module that contains multiple functions.\nWhat kind of export be leverages so that multiple functions can be used?",
    "options": ["A. Named", "B. Default", "C. All", "D. Multi"],
    "answer": "A",
    "title": "Question 54",
    "explanation": ""
  },
  {
    "content": "A developer is wondering whether to use, Promise.then or Promise.catch, especially when a Promise throws an error?\nWhich two promises are rejected?\nWhich 2 are correct?",
    "options": [
      "A. Promise.reject('cool error here').catch(error => console.error(error));",
      "B. Promise.reject('cool error here').then(error => console.error(error));",
      "C. New Promise((resolve, reject) => (throw 'cool error here'}).catch(error => console.error(error)) ;",
      "D. New Promise(() => (throw 'cool error here'}).then(null, error => console.error(error)));"
    ],
    "answer": "A,C",
    "title": "Question 55",
    "explanation": ""
  },
  {
    "content": "developer publishes a new version of a package with new features that do not break backward compatibility. The previous version number was 1.1.3.\nFollowing semantic versioning format, what should the new package version number be?",
    "options": ["A. 1.2.3", "B. 1.1.4", "C. 2.0.0", "D. 1.2.0"],
    "answer": "D",
    "title": "Question 56",
    "explanation": ""
  }
]
